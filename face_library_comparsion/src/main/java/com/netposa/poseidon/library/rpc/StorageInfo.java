/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.library.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-26")
public class StorageInfo implements org.apache.thrift.TBase<StorageInfo, StorageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<StorageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StorageInfo");

  private static final org.apache.thrift.protocol.TField LIBRARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMG_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("imgInfos", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StorageInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StorageInfoTupleSchemeFactory();

  public java.lang.String libraryId; // required
  public java.lang.String id; // required
  public java.util.List<ImgInfo> imgInfos; // required
  public java.lang.String ext; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIBRARY_ID((short)1, "libraryId"),
    ID((short)2, "id"),
    IMG_INFOS((short)3, "imgInfos"),
    EXT((short)4, "ext");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIBRARY_ID
          return LIBRARY_ID;
        case 2: // ID
          return ID;
        case 3: // IMG_INFOS
          return IMG_INFOS;
        case 4: // EXT
          return EXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIBRARY_ID, new org.apache.thrift.meta_data.FieldMetaData("libraryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_INFOS, new org.apache.thrift.meta_data.FieldMetaData("imgInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImgInfo.class))));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StorageInfo.class, metaDataMap);
  }

  public StorageInfo() {
  }

  public StorageInfo(
    java.lang.String libraryId,
    java.lang.String id,
    java.util.List<ImgInfo> imgInfos,
    java.lang.String ext)
  {
    this();
    this.libraryId = libraryId;
    this.id = id;
    this.imgInfos = imgInfos;
    this.ext = ext;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StorageInfo(StorageInfo other) {
    if (other.isSetLibraryId()) {
      this.libraryId = other.libraryId;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetImgInfos()) {
      java.util.List<ImgInfo> __this__imgInfos = new java.util.ArrayList<ImgInfo>(other.imgInfos.size());
      for (ImgInfo other_element : other.imgInfos) {
        __this__imgInfos.add(new ImgInfo(other_element));
      }
      this.imgInfos = __this__imgInfos;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
  }

  public StorageInfo deepCopy() {
    return new StorageInfo(this);
  }

  @Override
  public void clear() {
    this.libraryId = null;
    this.id = null;
    this.imgInfos = null;
    this.ext = null;
  }

  public java.lang.String getLibraryId() {
    return this.libraryId;
  }

  public StorageInfo setLibraryId(java.lang.String libraryId) {
    this.libraryId = libraryId;
    return this;
  }

  public void unsetLibraryId() {
    this.libraryId = null;
  }

  /** Returns true if field libraryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryId() {
    return this.libraryId != null;
  }

  public void setLibraryIdIsSet(boolean value) {
    if (!value) {
      this.libraryId = null;
    }
  }

  public java.lang.String getId() {
    return this.id;
  }

  public StorageInfo setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getImgInfosSize() {
    return (this.imgInfos == null) ? 0 : this.imgInfos.size();
  }

  public java.util.Iterator<ImgInfo> getImgInfosIterator() {
    return (this.imgInfos == null) ? null : this.imgInfos.iterator();
  }

  public void addToImgInfos(ImgInfo elem) {
    if (this.imgInfos == null) {
      this.imgInfos = new java.util.ArrayList<ImgInfo>();
    }
    this.imgInfos.add(elem);
  }

  public java.util.List<ImgInfo> getImgInfos() {
    return this.imgInfos;
  }

  public StorageInfo setImgInfos(java.util.List<ImgInfo> imgInfos) {
    this.imgInfos = imgInfos;
    return this;
  }

  public void unsetImgInfos() {
    this.imgInfos = null;
  }

  /** Returns true if field imgInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetImgInfos() {
    return this.imgInfos != null;
  }

  public void setImgInfosIsSet(boolean value) {
    if (!value) {
      this.imgInfos = null;
    }
  }

  public java.lang.String getExt() {
    return this.ext;
  }

  public StorageInfo setExt(java.lang.String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LIBRARY_ID:
      if (value == null) {
        unsetLibraryId();
      } else {
        setLibraryId((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case IMG_INFOS:
      if (value == null) {
        unsetImgInfos();
      } else {
        setImgInfos((java.util.List<ImgInfo>)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LIBRARY_ID:
      return getLibraryId();

    case ID:
      return getId();

    case IMG_INFOS:
      return getImgInfos();

    case EXT:
      return getExt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LIBRARY_ID:
      return isSetLibraryId();
    case ID:
      return isSetId();
    case IMG_INFOS:
      return isSetImgInfos();
    case EXT:
      return isSetExt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StorageInfo)
      return this.equals((StorageInfo)that);
    return false;
  }

  public boolean equals(StorageInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_libraryId = true && this.isSetLibraryId();
    boolean that_present_libraryId = true && that.isSetLibraryId();
    if (this_present_libraryId || that_present_libraryId) {
      if (!(this_present_libraryId && that_present_libraryId))
        return false;
      if (!this.libraryId.equals(that.libraryId))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_imgInfos = true && this.isSetImgInfos();
    boolean that_present_imgInfos = true && that.isSetImgInfos();
    if (this_present_imgInfos || that_present_imgInfos) {
      if (!(this_present_imgInfos && that_present_imgInfos))
        return false;
      if (!this.imgInfos.equals(that.imgInfos))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLibraryId()) ? 131071 : 524287);
    if (isSetLibraryId())
      hashCode = hashCode * 8191 + libraryId.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetImgInfos()) ? 131071 : 524287);
    if (isSetImgInfos())
      hashCode = hashCode * 8191 + imgInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
    if (isSetExt())
      hashCode = hashCode * 8191 + ext.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StorageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLibraryId()).compareTo(other.isSetLibraryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryId, other.libraryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImgInfos()).compareTo(other.isSetImgInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgInfos, other.imgInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StorageInfo(");
    boolean first = true;

    sb.append("libraryId:");
    if (this.libraryId == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgInfos:");
    if (this.imgInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.imgInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StorageInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StorageInfoStandardScheme getScheme() {
      return new StorageInfoStandardScheme();
    }
  }

  private static class StorageInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<StorageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StorageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIBRARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.libraryId = iprot.readString();
              struct.setLibraryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMG_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.imgInfos = new java.util.ArrayList<ImgInfo>(_list0.size);
                ImgInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ImgInfo();
                  _elem1.read(iprot);
                  struct.imgInfos.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setImgInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StorageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.libraryId != null) {
        oprot.writeFieldBegin(LIBRARY_ID_FIELD_DESC);
        oprot.writeString(struct.libraryId);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.imgInfos != null) {
        oprot.writeFieldBegin(IMG_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.imgInfos.size()));
          for (ImgInfo _iter3 : struct.imgInfos)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StorageInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StorageInfoTupleScheme getScheme() {
      return new StorageInfoTupleScheme();
    }
  }

  private static class StorageInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<StorageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StorageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLibraryId()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetImgInfos()) {
        optionals.set(2);
      }
      if (struct.isSetExt()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLibraryId()) {
        oprot.writeString(struct.libraryId);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetImgInfos()) {
        {
          oprot.writeI32(struct.imgInfos.size());
          for (ImgInfo _iter4 : struct.imgInfos)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StorageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.libraryId = iprot.readString();
        struct.setLibraryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.imgInfos = new java.util.ArrayList<ImgInfo>(_list5.size);
          ImgInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ImgInfo();
            _elem6.read(iprot);
            struct.imgInfos.add(_elem6);
          }
        }
        struct.setImgInfosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

