<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>coding</artifactId>
        <groupId>com.nukil</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>auxiliay_retirval</artifactId>
    <version>1.0-SNAPSHOT</version>

    <build>
        <plugins>
            <!-- 这是个编译java代码的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- 编译插件版本 -->
                <version>3.3</version>
                <configuration>
                    <!-- 源代码兼容的java版本, 修改该项可以解决每次更新pom文件导致的java版本过低导致编译失败问题 -->
                    <source>1.7</source>
                    <!-- 编译完的类库运行的java版本环境 -->
                    <target>1.7</target>
                </configuration>
            </plugin>

            <!-- 这是个编译scala代码的插件 -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <!-- 编译插件版本 -->
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <source>2.11</source>
                    <target>2.11</target>
                </configuration>
            </plugin>

            <!-- 生成的jar包配置项 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <!-- 插件配置 -->
                <configuration>
                    <!-- 结构配置 -->
                    <archive>
                        <!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <!-- Manifest 配置项 -->
                        <manifest>
                            <!-- 是否要把第三方jar放到manifest的classpath中 -->
                            <addClasspath>true</addClasspath>
                            <!-- 生成的manifest中classpath的前缀，因为要把第三方jar放到lib目录下，所以classpath的前缀是lib/ -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- 应用的main class 如果没有主类则不填写该项-->
                            <!--<mainClass></mainClass>-->
                        </manifest>
                        <manifestEntries>
                            <Class-Path>config/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <!-- 过滤掉不希望包含在jar中的文件 -->
                    <excludes>
                        <classesDirectory>${project.basedir}/src/main/resources/</classesDirectory>
                        <!-- *.*通配符表示所有文件 -->
                        <exclude>*.*</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- 项目资源文件配置插件 -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <!-- 仅拷贝文件 -->
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- 输出文件目录-->
                            <outputDirectory>${project.build.directory}/maven-archiver/resources</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/resources</directory>
                                    <include>*.*</include>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 项目构建插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <!-- 插件配置 -->
                <configuration>
                    <!-- 具体配置 -->
                    <descriptors>
                        <!-- 项目构建依赖的xml配置文件路径, 具体配置在该文件中编写 -->
                        <descriptor>${project.basedir}/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <!-- 执行器配置 -->
                    <execution>
                        <!-- 名字任意填写  -->
                        <id>make-assembly</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只执行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>