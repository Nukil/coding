/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.face.rpc.outrpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-27")
public class FaceTrackingResult implements org.apache.thrift.TBase<FaceTrackingResult, FaceTrackingResult._Fields>, java.io.Serializable, Cloneable, Comparable<FaceTrackingResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FaceTrackingResult");

  private static final org.apache.thrift.protocol.TField FACE_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("faceImgs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CAMERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OCCURRENCES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("occurrencesCount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FaceTrackingResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FaceTrackingResultTupleSchemeFactory();

  public java.util.List<SearchImgResult> faceImgs; // required
  public java.lang.String cameraId; // required
  public int occurrencesCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FACE_IMGS((short)1, "faceImgs"),
    CAMERA_ID((short)2, "cameraId"),
    OCCURRENCES_COUNT((short)3, "occurrencesCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACE_IMGS
          return FACE_IMGS;
        case 2: // CAMERA_ID
          return CAMERA_ID;
        case 3: // OCCURRENCES_COUNT
          return OCCURRENCES_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OCCURRENCESCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACE_IMGS, new org.apache.thrift.meta_data.FieldMetaData("faceImgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SearchImgResult"))));
    tmpMap.put(_Fields.CAMERA_ID, new org.apache.thrift.meta_data.FieldMetaData("cameraId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCURRENCES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("occurrencesCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FaceTrackingResult.class, metaDataMap);
  }

  public FaceTrackingResult() {
  }

  public FaceTrackingResult(
    java.util.List<SearchImgResult> faceImgs,
    java.lang.String cameraId,
    int occurrencesCount)
  {
    this();
    this.faceImgs = faceImgs;
    this.cameraId = cameraId;
    this.occurrencesCount = occurrencesCount;
    setOccurrencesCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FaceTrackingResult(FaceTrackingResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFaceImgs()) {
      java.util.List<SearchImgResult> __this__faceImgs = new java.util.ArrayList<SearchImgResult>(other.faceImgs.size());
      for (SearchImgResult other_element : other.faceImgs) {
        __this__faceImgs.add(other_element);
      }
      this.faceImgs = __this__faceImgs;
    }
    if (other.isSetCameraId()) {
      this.cameraId = other.cameraId;
    }
    this.occurrencesCount = other.occurrencesCount;
  }

  public FaceTrackingResult deepCopy() {
    return new FaceTrackingResult(this);
  }

  @Override
  public void clear() {
    this.faceImgs = null;
    this.cameraId = null;
    setOccurrencesCountIsSet(false);
    this.occurrencesCount = 0;
  }

  public int getFaceImgsSize() {
    return (this.faceImgs == null) ? 0 : this.faceImgs.size();
  }

  public java.util.Iterator<SearchImgResult> getFaceImgsIterator() {
    return (this.faceImgs == null) ? null : this.faceImgs.iterator();
  }

  public void addToFaceImgs(SearchImgResult elem) {
    if (this.faceImgs == null) {
      this.faceImgs = new java.util.ArrayList<SearchImgResult>();
    }
    this.faceImgs.add(elem);
  }

  public java.util.List<SearchImgResult> getFaceImgs() {
    return this.faceImgs;
  }

  public FaceTrackingResult setFaceImgs(java.util.List<SearchImgResult> faceImgs) {
    this.faceImgs = faceImgs;
    return this;
  }

  public void unsetFaceImgs() {
    this.faceImgs = null;
  }

  /** Returns true if field faceImgs is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceImgs() {
    return this.faceImgs != null;
  }

  public void setFaceImgsIsSet(boolean value) {
    if (!value) {
      this.faceImgs = null;
    }
  }

  public java.lang.String getCameraId() {
    return this.cameraId;
  }

  public FaceTrackingResult setCameraId(java.lang.String cameraId) {
    this.cameraId = cameraId;
    return this;
  }

  public void unsetCameraId() {
    this.cameraId = null;
  }

  /** Returns true if field cameraId is set (has been assigned a value) and false otherwise */
  public boolean isSetCameraId() {
    return this.cameraId != null;
  }

  public void setCameraIdIsSet(boolean value) {
    if (!value) {
      this.cameraId = null;
    }
  }

  public int getOccurrencesCount() {
    return this.occurrencesCount;
  }

  public FaceTrackingResult setOccurrencesCount(int occurrencesCount) {
    this.occurrencesCount = occurrencesCount;
    setOccurrencesCountIsSet(true);
    return this;
  }

  public void unsetOccurrencesCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OCCURRENCESCOUNT_ISSET_ID);
  }

  /** Returns true if field occurrencesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurrencesCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OCCURRENCESCOUNT_ISSET_ID);
  }

  public void setOccurrencesCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OCCURRENCESCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FACE_IMGS:
      if (value == null) {
        unsetFaceImgs();
      } else {
        setFaceImgs((java.util.List<SearchImgResult>)value);
      }
      break;

    case CAMERA_ID:
      if (value == null) {
        unsetCameraId();
      } else {
        setCameraId((java.lang.String)value);
      }
      break;

    case OCCURRENCES_COUNT:
      if (value == null) {
        unsetOccurrencesCount();
      } else {
        setOccurrencesCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FACE_IMGS:
      return getFaceImgs();

    case CAMERA_ID:
      return getCameraId();

    case OCCURRENCES_COUNT:
      return getOccurrencesCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FACE_IMGS:
      return isSetFaceImgs();
    case CAMERA_ID:
      return isSetCameraId();
    case OCCURRENCES_COUNT:
      return isSetOccurrencesCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FaceTrackingResult)
      return this.equals((FaceTrackingResult)that);
    return false;
  }

  public boolean equals(FaceTrackingResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_faceImgs = true && this.isSetFaceImgs();
    boolean that_present_faceImgs = true && that.isSetFaceImgs();
    if (this_present_faceImgs || that_present_faceImgs) {
      if (!(this_present_faceImgs && that_present_faceImgs))
        return false;
      if (!this.faceImgs.equals(that.faceImgs))
        return false;
    }

    boolean this_present_cameraId = true && this.isSetCameraId();
    boolean that_present_cameraId = true && that.isSetCameraId();
    if (this_present_cameraId || that_present_cameraId) {
      if (!(this_present_cameraId && that_present_cameraId))
        return false;
      if (!this.cameraId.equals(that.cameraId))
        return false;
    }

    boolean this_present_occurrencesCount = true;
    boolean that_present_occurrencesCount = true;
    if (this_present_occurrencesCount || that_present_occurrencesCount) {
      if (!(this_present_occurrencesCount && that_present_occurrencesCount))
        return false;
      if (this.occurrencesCount != that.occurrencesCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFaceImgs()) ? 131071 : 524287);
    if (isSetFaceImgs())
      hashCode = hashCode * 8191 + faceImgs.hashCode();

    hashCode = hashCode * 8191 + ((isSetCameraId()) ? 131071 : 524287);
    if (isSetCameraId())
      hashCode = hashCode * 8191 + cameraId.hashCode();

    hashCode = hashCode * 8191 + occurrencesCount;

    return hashCode;
  }

  @Override
  public int compareTo(FaceTrackingResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFaceImgs()).compareTo(other.isSetFaceImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceImgs, other.faceImgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCameraId()).compareTo(other.isSetCameraId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCameraId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraId, other.cameraId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOccurrencesCount()).compareTo(other.isSetOccurrencesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurrencesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurrencesCount, other.occurrencesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FaceTrackingResult(");
    boolean first = true;

    sb.append("faceImgs:");
    if (this.faceImgs == null) {
      sb.append("null");
    } else {
      sb.append(this.faceImgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cameraId:");
    if (this.cameraId == null) {
      sb.append("null");
    } else {
      sb.append(this.cameraId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occurrencesCount:");
    sb.append(this.occurrencesCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FaceTrackingResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceTrackingResultStandardScheme getScheme() {
      return new FaceTrackingResultStandardScheme();
    }
  }

  private static class FaceTrackingResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FaceTrackingResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FaceTrackingResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACE_IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.faceImgs = new java.util.ArrayList<SearchImgResult>(_list40.size);
                SearchImgResult _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new SearchImgResult();
                  _elem41.read(iprot);
                  struct.faceImgs.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setFaceImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAMERA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cameraId = iprot.readString();
              struct.setCameraIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OCCURRENCES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.occurrencesCount = iprot.readI32();
              struct.setOccurrencesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FaceTrackingResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.faceImgs != null) {
        oprot.writeFieldBegin(FACE_IMGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.faceImgs.size()));
          for (SearchImgResult _iter43 : struct.faceImgs)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cameraId != null) {
        oprot.writeFieldBegin(CAMERA_ID_FIELD_DESC);
        oprot.writeString(struct.cameraId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OCCURRENCES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.occurrencesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FaceTrackingResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceTrackingResultTupleScheme getScheme() {
      return new FaceTrackingResultTupleScheme();
    }
  }

  private static class FaceTrackingResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FaceTrackingResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FaceTrackingResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFaceImgs()) {
        optionals.set(0);
      }
      if (struct.isSetCameraId()) {
        optionals.set(1);
      }
      if (struct.isSetOccurrencesCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFaceImgs()) {
        {
          oprot.writeI32(struct.faceImgs.size());
          for (SearchImgResult _iter44 : struct.faceImgs)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetCameraId()) {
        oprot.writeString(struct.cameraId);
      }
      if (struct.isSetOccurrencesCount()) {
        oprot.writeI32(struct.occurrencesCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FaceTrackingResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.faceImgs = new java.util.ArrayList<SearchImgResult>(_list45.size);
          SearchImgResult _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new SearchImgResult();
            _elem46.read(iprot);
            struct.faceImgs.add(_elem46);
          }
        }
        struct.setFaceImgsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cameraId = iprot.readString();
        struct.setCameraIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.occurrencesCount = iprot.readI32();
        struct.setOccurrencesCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

