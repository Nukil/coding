/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.face.rpc.outrpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-27")
public class CollisionAyalyzeResult implements org.apache.thrift.TBase<CollisionAyalyzeResult, CollisionAyalyzeResult._Fields>, java.io.Serializable, Cloneable, Comparable<CollisionAyalyzeResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollisionAyalyzeResult");

  private static final org.apache.thrift.protocol.TField LOG_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("logNums", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCount", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CollisionAyalyzeResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CollisionAyalyzeResultTupleSchemeFactory();

  public java.util.List<java.util.List<java.lang.String>> logNums; // required
  public int regionCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_NUMS((short)1, "logNums"),
    REGION_COUNT((short)2, "regionCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_NUMS
          return LOG_NUMS;
        case 2: // REGION_COUNT
          return REGION_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGIONCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_NUMS, new org.apache.thrift.meta_data.FieldMetaData("logNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.REGION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("regionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollisionAyalyzeResult.class, metaDataMap);
  }

  public CollisionAyalyzeResult() {
  }

  public CollisionAyalyzeResult(
    java.util.List<java.util.List<java.lang.String>> logNums,
    int regionCount)
  {
    this();
    this.logNums = logNums;
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollisionAyalyzeResult(CollisionAyalyzeResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLogNums()) {
      java.util.List<java.util.List<java.lang.String>> __this__logNums = new java.util.ArrayList<java.util.List<java.lang.String>>(other.logNums.size());
      for (java.util.List<java.lang.String> other_element : other.logNums) {
        java.util.List<java.lang.String> __this__logNums_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__logNums.add(__this__logNums_copy);
      }
      this.logNums = __this__logNums;
    }
    this.regionCount = other.regionCount;
  }

  public CollisionAyalyzeResult deepCopy() {
    return new CollisionAyalyzeResult(this);
  }

  @Override
  public void clear() {
    this.logNums = null;
    setRegionCountIsSet(false);
    this.regionCount = 0;
  }

  public int getLogNumsSize() {
    return (this.logNums == null) ? 0 : this.logNums.size();
  }

  public java.util.Iterator<java.util.List<java.lang.String>> getLogNumsIterator() {
    return (this.logNums == null) ? null : this.logNums.iterator();
  }

  public void addToLogNums(java.util.List<java.lang.String> elem) {
    if (this.logNums == null) {
      this.logNums = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.logNums.add(elem);
  }

  public java.util.List<java.util.List<java.lang.String>> getLogNums() {
    return this.logNums;
  }

  public CollisionAyalyzeResult setLogNums(java.util.List<java.util.List<java.lang.String>> logNums) {
    this.logNums = logNums;
    return this;
  }

  public void unsetLogNums() {
    this.logNums = null;
  }

  /** Returns true if field logNums is set (has been assigned a value) and false otherwise */
  public boolean isSetLogNums() {
    return this.logNums != null;
  }

  public void setLogNumsIsSet(boolean value) {
    if (!value) {
      this.logNums = null;
    }
  }

  public int getRegionCount() {
    return this.regionCount;
  }

  public CollisionAyalyzeResult setRegionCount(int regionCount) {
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    return this;
  }

  public void unsetRegionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  /** Returns true if field regionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  public void setRegionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LOG_NUMS:
      if (value == null) {
        unsetLogNums();
      } else {
        setLogNums((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case REGION_COUNT:
      if (value == null) {
        unsetRegionCount();
      } else {
        setRegionCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_NUMS:
      return getLogNums();

    case REGION_COUNT:
      return getRegionCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOG_NUMS:
      return isSetLogNums();
    case REGION_COUNT:
      return isSetRegionCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CollisionAyalyzeResult)
      return this.equals((CollisionAyalyzeResult)that);
    return false;
  }

  public boolean equals(CollisionAyalyzeResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_logNums = true && this.isSetLogNums();
    boolean that_present_logNums = true && that.isSetLogNums();
    if (this_present_logNums || that_present_logNums) {
      if (!(this_present_logNums && that_present_logNums))
        return false;
      if (!this.logNums.equals(that.logNums))
        return false;
    }

    boolean this_present_regionCount = true;
    boolean that_present_regionCount = true;
    if (this_present_regionCount || that_present_regionCount) {
      if (!(this_present_regionCount && that_present_regionCount))
        return false;
      if (this.regionCount != that.regionCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLogNums()) ? 131071 : 524287);
    if (isSetLogNums())
      hashCode = hashCode * 8191 + logNums.hashCode();

    hashCode = hashCode * 8191 + regionCount;

    return hashCode;
  }

  @Override
  public int compareTo(CollisionAyalyzeResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLogNums()).compareTo(other.isSetLogNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logNums, other.logNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionCount()).compareTo(other.isSetRegionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCount, other.regionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CollisionAyalyzeResult(");
    boolean first = true;

    sb.append("logNums:");
    if (this.logNums == null) {
      sb.append("null");
    } else {
      sb.append(this.logNums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCount:");
    sb.append(this.regionCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollisionAyalyzeResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollisionAyalyzeResultStandardScheme getScheme() {
      return new CollisionAyalyzeResultStandardScheme();
    }
  }

  private static class CollisionAyalyzeResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CollisionAyalyzeResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollisionAyalyzeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.logNums = new java.util.ArrayList<java.util.List<java.lang.String>>(_list16.size);
                java.util.List<java.lang.String> _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  {
                    org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                    _elem17 = new java.util.ArrayList<java.lang.String>(_list19.size);
                    java.lang.String _elem20;
                    for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                    {
                      _elem20 = iprot.readString();
                      _elem17.add(_elem20);
                    }
                    iprot.readListEnd();
                  }
                  struct.logNums.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setLogNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regionCount = iprot.readI32();
              struct.setRegionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollisionAyalyzeResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.logNums != null) {
        oprot.writeFieldBegin(LOG_NUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.logNums.size()));
          for (java.util.List<java.lang.String> _iter22 : struct.logNums)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter22.size()));
              for (java.lang.String _iter23 : _iter22)
              {
                oprot.writeString(_iter23);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.regionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollisionAyalyzeResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollisionAyalyzeResultTupleScheme getScheme() {
      return new CollisionAyalyzeResultTupleScheme();
    }
  }

  private static class CollisionAyalyzeResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CollisionAyalyzeResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollisionAyalyzeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLogNums()) {
        optionals.set(0);
      }
      if (struct.isSetRegionCount()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLogNums()) {
        {
          oprot.writeI32(struct.logNums.size());
          for (java.util.List<java.lang.String> _iter24 : struct.logNums)
          {
            {
              oprot.writeI32(_iter24.size());
              for (java.lang.String _iter25 : _iter24)
              {
                oprot.writeString(_iter25);
              }
            }
          }
        }
      }
      if (struct.isSetRegionCount()) {
        oprot.writeI32(struct.regionCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollisionAyalyzeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.logNums = new java.util.ArrayList<java.util.List<java.lang.String>>(_list26.size);
          java.util.List<java.lang.String> _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            {
              org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem27 = new java.util.ArrayList<java.lang.String>(_list29.size);
              java.lang.String _elem30;
              for (int _i31 = 0; _i31 < _list29.size; ++_i31)
              {
                _elem30 = iprot.readString();
                _elem27.add(_elem30);
              }
            }
            struct.logNums.add(_elem27);
          }
        }
        struct.setLogNumsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.regionCount = iprot.readI32();
        struct.setRegionCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

