/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.face.rpc.outrpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-27")
public class FaceFeatureDataAnalyzeRpcService {

  public interface Iface {

    public java.util.List<CollisionAyalyzeResult> collisionAyalyze(CollisionAyalyzeInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<AccompanyAyalyzeResult> accompanyAyalyze(AccompanyAyalyzeInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<AccompanyAyalyzeResult> frequentPass(FrequentPassInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<FaceTrackingResult> faceTracking(SearchImgByImgInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<AccompanyAyalyzeResult> searchHumanByTrack(SearchHumanByTrackInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<SearchImgResult> searchFaceImgByImg(SearchImgByImgInputRecord record) throws org.apache.thrift.TException;

    public java.util.List<SearchImgResult> searchFaceImgByLog(SearchImgByLogInputRecord record) throws org.apache.thrift.TException;

    public double featureVerify(FeatureVerifyRecord record) throws org.apache.thrift.TException;

    public SearchImgByAssistResponse searchFaceImgByAssist(SearchImgByAssistInputRecord record) throws org.apache.thrift.TException;

    public SearchFeatureByLogResponse searchFeatureByLog(SearchFeatureByLogInputRecord record) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void collisionAyalyze(CollisionAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>> resultHandler) throws org.apache.thrift.TException;

    public void accompanyAyalyze(AccompanyAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException;

    public void frequentPass(FrequentPassInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException;

    public void faceTracking(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>> resultHandler) throws org.apache.thrift.TException;

    public void searchHumanByTrack(SearchHumanByTrackInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException;

    public void searchFaceImgByImg(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException;

    public void searchFaceImgByLog(SearchImgByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException;

    public void featureVerify(FeatureVerifyRecord record, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void searchFaceImgByAssist(SearchImgByAssistInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse> resultHandler) throws org.apache.thrift.TException;

    public void searchFeatureByLog(SearchFeatureByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<CollisionAyalyzeResult> collisionAyalyze(CollisionAyalyzeInputRecord record) throws org.apache.thrift.TException
    {
      send_collisionAyalyze(record);
      return recv_collisionAyalyze();
    }

    public void send_collisionAyalyze(CollisionAyalyzeInputRecord record) throws org.apache.thrift.TException
    {
      collisionAyalyze_args args = new collisionAyalyze_args();
      args.setRecord(record);
      sendBase("collisionAyalyze", args);
    }

    public java.util.List<CollisionAyalyzeResult> recv_collisionAyalyze() throws org.apache.thrift.TException
    {
      collisionAyalyze_result result = new collisionAyalyze_result();
      receiveBase(result, "collisionAyalyze");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collisionAyalyze failed: unknown result");
    }

    public java.util.List<AccompanyAyalyzeResult> accompanyAyalyze(AccompanyAyalyzeInputRecord record) throws org.apache.thrift.TException
    {
      send_accompanyAyalyze(record);
      return recv_accompanyAyalyze();
    }

    public void send_accompanyAyalyze(AccompanyAyalyzeInputRecord record) throws org.apache.thrift.TException
    {
      accompanyAyalyze_args args = new accompanyAyalyze_args();
      args.setRecord(record);
      sendBase("accompanyAyalyze", args);
    }

    public java.util.List<AccompanyAyalyzeResult> recv_accompanyAyalyze() throws org.apache.thrift.TException
    {
      accompanyAyalyze_result result = new accompanyAyalyze_result();
      receiveBase(result, "accompanyAyalyze");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "accompanyAyalyze failed: unknown result");
    }

    public java.util.List<AccompanyAyalyzeResult> frequentPass(FrequentPassInputRecord record) throws org.apache.thrift.TException
    {
      send_frequentPass(record);
      return recv_frequentPass();
    }

    public void send_frequentPass(FrequentPassInputRecord record) throws org.apache.thrift.TException
    {
      frequentPass_args args = new frequentPass_args();
      args.setRecord(record);
      sendBase("frequentPass", args);
    }

    public java.util.List<AccompanyAyalyzeResult> recv_frequentPass() throws org.apache.thrift.TException
    {
      frequentPass_result result = new frequentPass_result();
      receiveBase(result, "frequentPass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "frequentPass failed: unknown result");
    }

    public java.util.List<FaceTrackingResult> faceTracking(SearchImgByImgInputRecord record) throws org.apache.thrift.TException
    {
      send_faceTracking(record);
      return recv_faceTracking();
    }

    public void send_faceTracking(SearchImgByImgInputRecord record) throws org.apache.thrift.TException
    {
      faceTracking_args args = new faceTracking_args();
      args.setRecord(record);
      sendBase("faceTracking", args);
    }

    public java.util.List<FaceTrackingResult> recv_faceTracking() throws org.apache.thrift.TException
    {
      faceTracking_result result = new faceTracking_result();
      receiveBase(result, "faceTracking");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "faceTracking failed: unknown result");
    }

    public java.util.List<AccompanyAyalyzeResult> searchHumanByTrack(SearchHumanByTrackInputRecord record) throws org.apache.thrift.TException
    {
      send_searchHumanByTrack(record);
      return recv_searchHumanByTrack();
    }

    public void send_searchHumanByTrack(SearchHumanByTrackInputRecord record) throws org.apache.thrift.TException
    {
      searchHumanByTrack_args args = new searchHumanByTrack_args();
      args.setRecord(record);
      sendBase("searchHumanByTrack", args);
    }

    public java.util.List<AccompanyAyalyzeResult> recv_searchHumanByTrack() throws org.apache.thrift.TException
    {
      searchHumanByTrack_result result = new searchHumanByTrack_result();
      receiveBase(result, "searchHumanByTrack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchHumanByTrack failed: unknown result");
    }

    public java.util.List<SearchImgResult> searchFaceImgByImg(SearchImgByImgInputRecord record) throws org.apache.thrift.TException
    {
      send_searchFaceImgByImg(record);
      return recv_searchFaceImgByImg();
    }

    public void send_searchFaceImgByImg(SearchImgByImgInputRecord record) throws org.apache.thrift.TException
    {
      searchFaceImgByImg_args args = new searchFaceImgByImg_args();
      args.setRecord(record);
      sendBase("searchFaceImgByImg", args);
    }

    public java.util.List<SearchImgResult> recv_searchFaceImgByImg() throws org.apache.thrift.TException
    {
      searchFaceImgByImg_result result = new searchFaceImgByImg_result();
      receiveBase(result, "searchFaceImgByImg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFaceImgByImg failed: unknown result");
    }

    public java.util.List<SearchImgResult> searchFaceImgByLog(SearchImgByLogInputRecord record) throws org.apache.thrift.TException
    {
      send_searchFaceImgByLog(record);
      return recv_searchFaceImgByLog();
    }

    public void send_searchFaceImgByLog(SearchImgByLogInputRecord record) throws org.apache.thrift.TException
    {
      searchFaceImgByLog_args args = new searchFaceImgByLog_args();
      args.setRecord(record);
      sendBase("searchFaceImgByLog", args);
    }

    public java.util.List<SearchImgResult> recv_searchFaceImgByLog() throws org.apache.thrift.TException
    {
      searchFaceImgByLog_result result = new searchFaceImgByLog_result();
      receiveBase(result, "searchFaceImgByLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFaceImgByLog failed: unknown result");
    }

    public double featureVerify(FeatureVerifyRecord record) throws org.apache.thrift.TException
    {
      send_featureVerify(record);
      return recv_featureVerify();
    }

    public void send_featureVerify(FeatureVerifyRecord record) throws org.apache.thrift.TException
    {
      featureVerify_args args = new featureVerify_args();
      args.setRecord(record);
      sendBase("featureVerify", args);
    }

    public double recv_featureVerify() throws org.apache.thrift.TException
    {
      featureVerify_result result = new featureVerify_result();
      receiveBase(result, "featureVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "featureVerify failed: unknown result");
    }

    public SearchImgByAssistResponse searchFaceImgByAssist(SearchImgByAssistInputRecord record) throws org.apache.thrift.TException
    {
      send_searchFaceImgByAssist(record);
      return recv_searchFaceImgByAssist();
    }

    public void send_searchFaceImgByAssist(SearchImgByAssistInputRecord record) throws org.apache.thrift.TException
    {
      searchFaceImgByAssist_args args = new searchFaceImgByAssist_args();
      args.setRecord(record);
      sendBase("searchFaceImgByAssist", args);
    }

    public SearchImgByAssistResponse recv_searchFaceImgByAssist() throws org.apache.thrift.TException
    {
      searchFaceImgByAssist_result result = new searchFaceImgByAssist_result();
      receiveBase(result, "searchFaceImgByAssist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFaceImgByAssist failed: unknown result");
    }

    public SearchFeatureByLogResponse searchFeatureByLog(SearchFeatureByLogInputRecord record) throws org.apache.thrift.TException
    {
      send_searchFeatureByLog(record);
      return recv_searchFeatureByLog();
    }

    public void send_searchFeatureByLog(SearchFeatureByLogInputRecord record) throws org.apache.thrift.TException
    {
      searchFeatureByLog_args args = new searchFeatureByLog_args();
      args.setRecord(record);
      sendBase("searchFeatureByLog", args);
    }

    public SearchFeatureByLogResponse recv_searchFeatureByLog() throws org.apache.thrift.TException
    {
      searchFeatureByLog_result result = new searchFeatureByLog_result();
      receiveBase(result, "searchFeatureByLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFeatureByLog failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void collisionAyalyze(CollisionAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collisionAyalyze_call method_call = new collisionAyalyze_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collisionAyalyze_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CollisionAyalyzeResult>> {
      private CollisionAyalyzeInputRecord record;
      public collisionAyalyze_call(CollisionAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collisionAyalyze", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collisionAyalyze_args args = new collisionAyalyze_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CollisionAyalyzeResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collisionAyalyze();
      }
    }

    public void accompanyAyalyze(AccompanyAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      accompanyAyalyze_call method_call = new accompanyAyalyze_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class accompanyAyalyze_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AccompanyAyalyzeResult>> {
      private AccompanyAyalyzeInputRecord record;
      public accompanyAyalyze_call(AccompanyAyalyzeInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accompanyAyalyze", org.apache.thrift.protocol.TMessageType.CALL, 0));
        accompanyAyalyze_args args = new accompanyAyalyze_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<AccompanyAyalyzeResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_accompanyAyalyze();
      }
    }

    public void frequentPass(FrequentPassInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      frequentPass_call method_call = new frequentPass_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class frequentPass_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AccompanyAyalyzeResult>> {
      private FrequentPassInputRecord record;
      public frequentPass_call(FrequentPassInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("frequentPass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        frequentPass_args args = new frequentPass_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<AccompanyAyalyzeResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_frequentPass();
      }
    }

    public void faceTracking(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      faceTracking_call method_call = new faceTracking_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class faceTracking_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<FaceTrackingResult>> {
      private SearchImgByImgInputRecord record;
      public faceTracking_call(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("faceTracking", org.apache.thrift.protocol.TMessageType.CALL, 0));
        faceTracking_args args = new faceTracking_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<FaceTrackingResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_faceTracking();
      }
    }

    public void searchHumanByTrack(SearchHumanByTrackInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchHumanByTrack_call method_call = new searchHumanByTrack_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchHumanByTrack_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AccompanyAyalyzeResult>> {
      private SearchHumanByTrackInputRecord record;
      public searchHumanByTrack_call(SearchHumanByTrackInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchHumanByTrack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchHumanByTrack_args args = new searchHumanByTrack_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<AccompanyAyalyzeResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchHumanByTrack();
      }
    }

    public void searchFaceImgByImg(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchFaceImgByImg_call method_call = new searchFaceImgByImg_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFaceImgByImg_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SearchImgResult>> {
      private SearchImgByImgInputRecord record;
      public searchFaceImgByImg_call(SearchImgByImgInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFaceImgByImg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFaceImgByImg_args args = new searchFaceImgByImg_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SearchImgResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFaceImgByImg();
      }
    }

    public void searchFaceImgByLog(SearchImgByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchFaceImgByLog_call method_call = new searchFaceImgByLog_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFaceImgByLog_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SearchImgResult>> {
      private SearchImgByLogInputRecord record;
      public searchFaceImgByLog_call(SearchImgByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFaceImgByLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFaceImgByLog_args args = new searchFaceImgByLog_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SearchImgResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFaceImgByLog();
      }
    }

    public void featureVerify(FeatureVerifyRecord record, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      featureVerify_call method_call = new featureVerify_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class featureVerify_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private FeatureVerifyRecord record;
      public featureVerify_call(FeatureVerifyRecord record, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("featureVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        featureVerify_args args = new featureVerify_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_featureVerify();
      }
    }

    public void searchFaceImgByAssist(SearchImgByAssistInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchFaceImgByAssist_call method_call = new searchFaceImgByAssist_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFaceImgByAssist_call extends org.apache.thrift.async.TAsyncMethodCall<SearchImgByAssistResponse> {
      private SearchImgByAssistInputRecord record;
      public searchFaceImgByAssist_call(SearchImgByAssistInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFaceImgByAssist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFaceImgByAssist_args args = new searchFaceImgByAssist_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SearchImgByAssistResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFaceImgByAssist();
      }
    }

    public void searchFeatureByLog(SearchFeatureByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchFeatureByLog_call method_call = new searchFeatureByLog_call(record, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFeatureByLog_call extends org.apache.thrift.async.TAsyncMethodCall<SearchFeatureByLogResponse> {
      private SearchFeatureByLogInputRecord record;
      public searchFeatureByLog_call(SearchFeatureByLogInputRecord record, org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.record = record;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFeatureByLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFeatureByLog_args args = new searchFeatureByLog_args();
        args.setRecord(record);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SearchFeatureByLogResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFeatureByLog();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("collisionAyalyze", new collisionAyalyze());
      processMap.put("accompanyAyalyze", new accompanyAyalyze());
      processMap.put("frequentPass", new frequentPass());
      processMap.put("faceTracking", new faceTracking());
      processMap.put("searchHumanByTrack", new searchHumanByTrack());
      processMap.put("searchFaceImgByImg", new searchFaceImgByImg());
      processMap.put("searchFaceImgByLog", new searchFaceImgByLog());
      processMap.put("featureVerify", new featureVerify());
      processMap.put("searchFaceImgByAssist", new searchFaceImgByAssist());
      processMap.put("searchFeatureByLog", new searchFeatureByLog());
      return processMap;
    }

    public static class collisionAyalyze<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collisionAyalyze_args> {
      public collisionAyalyze() {
        super("collisionAyalyze");
      }

      public collisionAyalyze_args getEmptyArgsInstance() {
        return new collisionAyalyze_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collisionAyalyze_result getResult(I iface, collisionAyalyze_args args) throws org.apache.thrift.TException {
        collisionAyalyze_result result = new collisionAyalyze_result();
        result.success = iface.collisionAyalyze(args.record);
        return result;
      }
    }

    public static class accompanyAyalyze<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accompanyAyalyze_args> {
      public accompanyAyalyze() {
        super("accompanyAyalyze");
      }

      public accompanyAyalyze_args getEmptyArgsInstance() {
        return new accompanyAyalyze_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public accompanyAyalyze_result getResult(I iface, accompanyAyalyze_args args) throws org.apache.thrift.TException {
        accompanyAyalyze_result result = new accompanyAyalyze_result();
        result.success = iface.accompanyAyalyze(args.record);
        return result;
      }
    }

    public static class frequentPass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, frequentPass_args> {
      public frequentPass() {
        super("frequentPass");
      }

      public frequentPass_args getEmptyArgsInstance() {
        return new frequentPass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public frequentPass_result getResult(I iface, frequentPass_args args) throws org.apache.thrift.TException {
        frequentPass_result result = new frequentPass_result();
        result.success = iface.frequentPass(args.record);
        return result;
      }
    }

    public static class faceTracking<I extends Iface> extends org.apache.thrift.ProcessFunction<I, faceTracking_args> {
      public faceTracking() {
        super("faceTracking");
      }

      public faceTracking_args getEmptyArgsInstance() {
        return new faceTracking_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public faceTracking_result getResult(I iface, faceTracking_args args) throws org.apache.thrift.TException {
        faceTracking_result result = new faceTracking_result();
        result.success = iface.faceTracking(args.record);
        return result;
      }
    }

    public static class searchHumanByTrack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchHumanByTrack_args> {
      public searchHumanByTrack() {
        super("searchHumanByTrack");
      }

      public searchHumanByTrack_args getEmptyArgsInstance() {
        return new searchHumanByTrack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchHumanByTrack_result getResult(I iface, searchHumanByTrack_args args) throws org.apache.thrift.TException {
        searchHumanByTrack_result result = new searchHumanByTrack_result();
        result.success = iface.searchHumanByTrack(args.record);
        return result;
      }
    }

    public static class searchFaceImgByImg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFaceImgByImg_args> {
      public searchFaceImgByImg() {
        super("searchFaceImgByImg");
      }

      public searchFaceImgByImg_args getEmptyArgsInstance() {
        return new searchFaceImgByImg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFaceImgByImg_result getResult(I iface, searchFaceImgByImg_args args) throws org.apache.thrift.TException {
        searchFaceImgByImg_result result = new searchFaceImgByImg_result();
        result.success = iface.searchFaceImgByImg(args.record);
        return result;
      }
    }

    public static class searchFaceImgByLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFaceImgByLog_args> {
      public searchFaceImgByLog() {
        super("searchFaceImgByLog");
      }

      public searchFaceImgByLog_args getEmptyArgsInstance() {
        return new searchFaceImgByLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFaceImgByLog_result getResult(I iface, searchFaceImgByLog_args args) throws org.apache.thrift.TException {
        searchFaceImgByLog_result result = new searchFaceImgByLog_result();
        result.success = iface.searchFaceImgByLog(args.record);
        return result;
      }
    }

    public static class featureVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, featureVerify_args> {
      public featureVerify() {
        super("featureVerify");
      }

      public featureVerify_args getEmptyArgsInstance() {
        return new featureVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public featureVerify_result getResult(I iface, featureVerify_args args) throws org.apache.thrift.TException {
        featureVerify_result result = new featureVerify_result();
        result.success = iface.featureVerify(args.record);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class searchFaceImgByAssist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFaceImgByAssist_args> {
      public searchFaceImgByAssist() {
        super("searchFaceImgByAssist");
      }

      public searchFaceImgByAssist_args getEmptyArgsInstance() {
        return new searchFaceImgByAssist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFaceImgByAssist_result getResult(I iface, searchFaceImgByAssist_args args) throws org.apache.thrift.TException {
        searchFaceImgByAssist_result result = new searchFaceImgByAssist_result();
        result.success = iface.searchFaceImgByAssist(args.record);
        return result;
      }
    }

    public static class searchFeatureByLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFeatureByLog_args> {
      public searchFeatureByLog() {
        super("searchFeatureByLog");
      }

      public searchFeatureByLog_args getEmptyArgsInstance() {
        return new searchFeatureByLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFeatureByLog_result getResult(I iface, searchFeatureByLog_args args) throws org.apache.thrift.TException {
        searchFeatureByLog_result result = new searchFeatureByLog_result();
        result.success = iface.searchFeatureByLog(args.record);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("collisionAyalyze", new collisionAyalyze());
      processMap.put("accompanyAyalyze", new accompanyAyalyze());
      processMap.put("frequentPass", new frequentPass());
      processMap.put("faceTracking", new faceTracking());
      processMap.put("searchHumanByTrack", new searchHumanByTrack());
      processMap.put("searchFaceImgByImg", new searchFaceImgByImg());
      processMap.put("searchFaceImgByLog", new searchFaceImgByLog());
      processMap.put("featureVerify", new featureVerify());
      processMap.put("searchFaceImgByAssist", new searchFaceImgByAssist());
      processMap.put("searchFeatureByLog", new searchFeatureByLog());
      return processMap;
    }

    public static class collisionAyalyze<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collisionAyalyze_args, java.util.List<CollisionAyalyzeResult>> {
      public collisionAyalyze() {
        super("collisionAyalyze");
      }

      public collisionAyalyze_args getEmptyArgsInstance() {
        return new collisionAyalyze_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>>() { 
          public void onComplete(java.util.List<CollisionAyalyzeResult> o) {
            collisionAyalyze_result result = new collisionAyalyze_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            collisionAyalyze_result result = new collisionAyalyze_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collisionAyalyze_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CollisionAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
        iface.collisionAyalyze(args.record,resultHandler);
      }
    }

    public static class accompanyAyalyze<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accompanyAyalyze_args, java.util.List<AccompanyAyalyzeResult>> {
      public accompanyAyalyze() {
        super("accompanyAyalyze");
      }

      public accompanyAyalyze_args getEmptyArgsInstance() {
        return new accompanyAyalyze_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>>() { 
          public void onComplete(java.util.List<AccompanyAyalyzeResult> o) {
            accompanyAyalyze_result result = new accompanyAyalyze_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            accompanyAyalyze_result result = new accompanyAyalyze_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, accompanyAyalyze_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
        iface.accompanyAyalyze(args.record,resultHandler);
      }
    }

    public static class frequentPass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, frequentPass_args, java.util.List<AccompanyAyalyzeResult>> {
      public frequentPass() {
        super("frequentPass");
      }

      public frequentPass_args getEmptyArgsInstance() {
        return new frequentPass_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>>() { 
          public void onComplete(java.util.List<AccompanyAyalyzeResult> o) {
            frequentPass_result result = new frequentPass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            frequentPass_result result = new frequentPass_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, frequentPass_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
        iface.frequentPass(args.record,resultHandler);
      }
    }

    public static class faceTracking<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, faceTracking_args, java.util.List<FaceTrackingResult>> {
      public faceTracking() {
        super("faceTracking");
      }

      public faceTracking_args getEmptyArgsInstance() {
        return new faceTracking_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>>() { 
          public void onComplete(java.util.List<FaceTrackingResult> o) {
            faceTracking_result result = new faceTracking_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            faceTracking_result result = new faceTracking_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, faceTracking_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FaceTrackingResult>> resultHandler) throws org.apache.thrift.TException {
        iface.faceTracking(args.record,resultHandler);
      }
    }

    public static class searchHumanByTrack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchHumanByTrack_args, java.util.List<AccompanyAyalyzeResult>> {
      public searchHumanByTrack() {
        super("searchHumanByTrack");
      }

      public searchHumanByTrack_args getEmptyArgsInstance() {
        return new searchHumanByTrack_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>>() { 
          public void onComplete(java.util.List<AccompanyAyalyzeResult> o) {
            searchHumanByTrack_result result = new searchHumanByTrack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchHumanByTrack_result result = new searchHumanByTrack_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchHumanByTrack_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AccompanyAyalyzeResult>> resultHandler) throws org.apache.thrift.TException {
        iface.searchHumanByTrack(args.record,resultHandler);
      }
    }

    public static class searchFaceImgByImg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFaceImgByImg_args, java.util.List<SearchImgResult>> {
      public searchFaceImgByImg() {
        super("searchFaceImgByImg");
      }

      public searchFaceImgByImg_args getEmptyArgsInstance() {
        return new searchFaceImgByImg_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>>() { 
          public void onComplete(java.util.List<SearchImgResult> o) {
            searchFaceImgByImg_result result = new searchFaceImgByImg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchFaceImgByImg_result result = new searchFaceImgByImg_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFaceImgByImg_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException {
        iface.searchFaceImgByImg(args.record,resultHandler);
      }
    }

    public static class searchFaceImgByLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFaceImgByLog_args, java.util.List<SearchImgResult>> {
      public searchFaceImgByLog() {
        super("searchFaceImgByLog");
      }

      public searchFaceImgByLog_args getEmptyArgsInstance() {
        return new searchFaceImgByLog_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>>() { 
          public void onComplete(java.util.List<SearchImgResult> o) {
            searchFaceImgByLog_result result = new searchFaceImgByLog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchFaceImgByLog_result result = new searchFaceImgByLog_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFaceImgByLog_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SearchImgResult>> resultHandler) throws org.apache.thrift.TException {
        iface.searchFaceImgByLog(args.record,resultHandler);
      }
    }

    public static class featureVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, featureVerify_args, java.lang.Double> {
      public featureVerify() {
        super("featureVerify");
      }

      public featureVerify_args getEmptyArgsInstance() {
        return new featureVerify_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            featureVerify_result result = new featureVerify_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            featureVerify_result result = new featureVerify_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, featureVerify_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.featureVerify(args.record,resultHandler);
      }
    }

    public static class searchFaceImgByAssist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFaceImgByAssist_args, SearchImgByAssistResponse> {
      public searchFaceImgByAssist() {
        super("searchFaceImgByAssist");
      }

      public searchFaceImgByAssist_args getEmptyArgsInstance() {
        return new searchFaceImgByAssist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse>() { 
          public void onComplete(SearchImgByAssistResponse o) {
            searchFaceImgByAssist_result result = new searchFaceImgByAssist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchFaceImgByAssist_result result = new searchFaceImgByAssist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFaceImgByAssist_args args, org.apache.thrift.async.AsyncMethodCallback<SearchImgByAssistResponse> resultHandler) throws org.apache.thrift.TException {
        iface.searchFaceImgByAssist(args.record,resultHandler);
      }
    }

    public static class searchFeatureByLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFeatureByLog_args, SearchFeatureByLogResponse> {
      public searchFeatureByLog() {
        super("searchFeatureByLog");
      }

      public searchFeatureByLog_args getEmptyArgsInstance() {
        return new searchFeatureByLog_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse>() { 
          public void onComplete(SearchFeatureByLogResponse o) {
            searchFeatureByLog_result result = new searchFeatureByLog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchFeatureByLog_result result = new searchFeatureByLog_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFeatureByLog_args args, org.apache.thrift.async.AsyncMethodCallback<SearchFeatureByLogResponse> resultHandler) throws org.apache.thrift.TException {
        iface.searchFeatureByLog(args.record,resultHandler);
      }
    }

  }

  public static class collisionAyalyze_args implements org.apache.thrift.TBase<collisionAyalyze_args, collisionAyalyze_args._Fields>, java.io.Serializable, Cloneable, Comparable<collisionAyalyze_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collisionAyalyze_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new collisionAyalyze_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new collisionAyalyze_argsTupleSchemeFactory();

    public CollisionAyalyzeInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollisionAyalyzeInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collisionAyalyze_args.class, metaDataMap);
    }

    public collisionAyalyze_args() {
    }

    public collisionAyalyze_args(
      CollisionAyalyzeInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collisionAyalyze_args(collisionAyalyze_args other) {
      if (other.isSetRecord()) {
        this.record = new CollisionAyalyzeInputRecord(other.record);
      }
    }

    public collisionAyalyze_args deepCopy() {
      return new collisionAyalyze_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public CollisionAyalyzeInputRecord getRecord() {
      return this.record;
    }

    public collisionAyalyze_args setRecord(CollisionAyalyzeInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((CollisionAyalyzeInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof collisionAyalyze_args)
        return this.equals((collisionAyalyze_args)that);
      return false;
    }

    public boolean equals(collisionAyalyze_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(collisionAyalyze_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("collisionAyalyze_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collisionAyalyze_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collisionAyalyze_argsStandardScheme getScheme() {
        return new collisionAyalyze_argsStandardScheme();
      }
    }

    private static class collisionAyalyze_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<collisionAyalyze_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collisionAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new CollisionAyalyzeInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collisionAyalyze_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collisionAyalyze_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collisionAyalyze_argsTupleScheme getScheme() {
        return new collisionAyalyze_argsTupleScheme();
      }
    }

    private static class collisionAyalyze_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<collisionAyalyze_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collisionAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collisionAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new CollisionAyalyzeInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class collisionAyalyze_result implements org.apache.thrift.TBase<collisionAyalyze_result, collisionAyalyze_result._Fields>, java.io.Serializable, Cloneable, Comparable<collisionAyalyze_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collisionAyalyze_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new collisionAyalyze_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new collisionAyalyze_resultTupleSchemeFactory();

    public java.util.List<CollisionAyalyzeResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollisionAyalyzeResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collisionAyalyze_result.class, metaDataMap);
    }

    public collisionAyalyze_result() {
    }

    public collisionAyalyze_result(
      java.util.List<CollisionAyalyzeResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collisionAyalyze_result(collisionAyalyze_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CollisionAyalyzeResult> __this__success = new java.util.ArrayList<CollisionAyalyzeResult>(other.success.size());
        for (CollisionAyalyzeResult other_element : other.success) {
          __this__success.add(new CollisionAyalyzeResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public collisionAyalyze_result deepCopy() {
      return new collisionAyalyze_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollisionAyalyzeResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollisionAyalyzeResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CollisionAyalyzeResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<CollisionAyalyzeResult> getSuccess() {
      return this.success;
    }

    public collisionAyalyze_result setSuccess(java.util.List<CollisionAyalyzeResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CollisionAyalyzeResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof collisionAyalyze_result)
        return this.equals((collisionAyalyze_result)that);
      return false;
    }

    public boolean equals(collisionAyalyze_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(collisionAyalyze_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("collisionAyalyze_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collisionAyalyze_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collisionAyalyze_resultStandardScheme getScheme() {
        return new collisionAyalyze_resultStandardScheme();
      }
    }

    private static class collisionAyalyze_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<collisionAyalyze_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collisionAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CollisionAyalyzeResult>(_list80.size);
                  CollisionAyalyzeResult _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new CollisionAyalyzeResult();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collisionAyalyze_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollisionAyalyzeResult _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collisionAyalyze_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collisionAyalyze_resultTupleScheme getScheme() {
        return new collisionAyalyze_resultTupleScheme();
      }
    }

    private static class collisionAyalyze_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<collisionAyalyze_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collisionAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollisionAyalyzeResult _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collisionAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CollisionAyalyzeResult>(_list85.size);
            CollisionAyalyzeResult _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new CollisionAyalyzeResult();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class accompanyAyalyze_args implements org.apache.thrift.TBase<accompanyAyalyze_args, accompanyAyalyze_args._Fields>, java.io.Serializable, Cloneable, Comparable<accompanyAyalyze_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accompanyAyalyze_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new accompanyAyalyze_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new accompanyAyalyze_argsTupleSchemeFactory();

    public AccompanyAyalyzeInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccompanyAyalyzeInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accompanyAyalyze_args.class, metaDataMap);
    }

    public accompanyAyalyze_args() {
    }

    public accompanyAyalyze_args(
      AccompanyAyalyzeInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accompanyAyalyze_args(accompanyAyalyze_args other) {
      if (other.isSetRecord()) {
        this.record = new AccompanyAyalyzeInputRecord(other.record);
      }
    }

    public accompanyAyalyze_args deepCopy() {
      return new accompanyAyalyze_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public AccompanyAyalyzeInputRecord getRecord() {
      return this.record;
    }

    public accompanyAyalyze_args setRecord(AccompanyAyalyzeInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((AccompanyAyalyzeInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof accompanyAyalyze_args)
        return this.equals((accompanyAyalyze_args)that);
      return false;
    }

    public boolean equals(accompanyAyalyze_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(accompanyAyalyze_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("accompanyAyalyze_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accompanyAyalyze_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public accompanyAyalyze_argsStandardScheme getScheme() {
        return new accompanyAyalyze_argsStandardScheme();
      }
    }

    private static class accompanyAyalyze_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<accompanyAyalyze_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accompanyAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new AccompanyAyalyzeInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accompanyAyalyze_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accompanyAyalyze_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public accompanyAyalyze_argsTupleScheme getScheme() {
        return new accompanyAyalyze_argsTupleScheme();
      }
    }

    private static class accompanyAyalyze_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<accompanyAyalyze_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accompanyAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accompanyAyalyze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new AccompanyAyalyzeInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class accompanyAyalyze_result implements org.apache.thrift.TBase<accompanyAyalyze_result, accompanyAyalyze_result._Fields>, java.io.Serializable, Cloneable, Comparable<accompanyAyalyze_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accompanyAyalyze_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new accompanyAyalyze_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new accompanyAyalyze_resultTupleSchemeFactory();

    public java.util.List<AccompanyAyalyzeResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccompanyAyalyzeResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accompanyAyalyze_result.class, metaDataMap);
    }

    public accompanyAyalyze_result() {
    }

    public accompanyAyalyze_result(
      java.util.List<AccompanyAyalyzeResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accompanyAyalyze_result(accompanyAyalyze_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AccompanyAyalyzeResult> __this__success = new java.util.ArrayList<AccompanyAyalyzeResult>(other.success.size());
        for (AccompanyAyalyzeResult other_element : other.success) {
          __this__success.add(new AccompanyAyalyzeResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public accompanyAyalyze_result deepCopy() {
      return new accompanyAyalyze_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AccompanyAyalyzeResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AccompanyAyalyzeResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AccompanyAyalyzeResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<AccompanyAyalyzeResult> getSuccess() {
      return this.success;
    }

    public accompanyAyalyze_result setSuccess(java.util.List<AccompanyAyalyzeResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AccompanyAyalyzeResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof accompanyAyalyze_result)
        return this.equals((accompanyAyalyze_result)that);
      return false;
    }

    public boolean equals(accompanyAyalyze_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(accompanyAyalyze_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("accompanyAyalyze_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accompanyAyalyze_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public accompanyAyalyze_resultStandardScheme getScheme() {
        return new accompanyAyalyze_resultStandardScheme();
      }
    }

    private static class accompanyAyalyze_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<accompanyAyalyze_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accompanyAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list88.size);
                  AccompanyAyalyzeResult _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new AccompanyAyalyzeResult();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accompanyAyalyze_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AccompanyAyalyzeResult _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accompanyAyalyze_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public accompanyAyalyze_resultTupleScheme getScheme() {
        return new accompanyAyalyze_resultTupleScheme();
      }
    }

    private static class accompanyAyalyze_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<accompanyAyalyze_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accompanyAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AccompanyAyalyzeResult _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accompanyAyalyze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list93.size);
            AccompanyAyalyzeResult _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new AccompanyAyalyzeResult();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class frequentPass_args implements org.apache.thrift.TBase<frequentPass_args, frequentPass_args._Fields>, java.io.Serializable, Cloneable, Comparable<frequentPass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("frequentPass_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new frequentPass_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new frequentPass_argsTupleSchemeFactory();

    public FrequentPassInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FrequentPassInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(frequentPass_args.class, metaDataMap);
    }

    public frequentPass_args() {
    }

    public frequentPass_args(
      FrequentPassInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public frequentPass_args(frequentPass_args other) {
      if (other.isSetRecord()) {
        this.record = new FrequentPassInputRecord(other.record);
      }
    }

    public frequentPass_args deepCopy() {
      return new frequentPass_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public FrequentPassInputRecord getRecord() {
      return this.record;
    }

    public frequentPass_args setRecord(FrequentPassInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((FrequentPassInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof frequentPass_args)
        return this.equals((frequentPass_args)that);
      return false;
    }

    public boolean equals(frequentPass_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(frequentPass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("frequentPass_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class frequentPass_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frequentPass_argsStandardScheme getScheme() {
        return new frequentPass_argsStandardScheme();
      }
    }

    private static class frequentPass_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<frequentPass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, frequentPass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new FrequentPassInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, frequentPass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class frequentPass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frequentPass_argsTupleScheme getScheme() {
        return new frequentPass_argsTupleScheme();
      }
    }

    private static class frequentPass_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<frequentPass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, frequentPass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, frequentPass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new FrequentPassInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class frequentPass_result implements org.apache.thrift.TBase<frequentPass_result, frequentPass_result._Fields>, java.io.Serializable, Cloneable, Comparable<frequentPass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("frequentPass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new frequentPass_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new frequentPass_resultTupleSchemeFactory();

    public java.util.List<AccompanyAyalyzeResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccompanyAyalyzeResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(frequentPass_result.class, metaDataMap);
    }

    public frequentPass_result() {
    }

    public frequentPass_result(
      java.util.List<AccompanyAyalyzeResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public frequentPass_result(frequentPass_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AccompanyAyalyzeResult> __this__success = new java.util.ArrayList<AccompanyAyalyzeResult>(other.success.size());
        for (AccompanyAyalyzeResult other_element : other.success) {
          __this__success.add(new AccompanyAyalyzeResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public frequentPass_result deepCopy() {
      return new frequentPass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AccompanyAyalyzeResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AccompanyAyalyzeResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AccompanyAyalyzeResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<AccompanyAyalyzeResult> getSuccess() {
      return this.success;
    }

    public frequentPass_result setSuccess(java.util.List<AccompanyAyalyzeResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AccompanyAyalyzeResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof frequentPass_result)
        return this.equals((frequentPass_result)that);
      return false;
    }

    public boolean equals(frequentPass_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(frequentPass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("frequentPass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class frequentPass_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frequentPass_resultStandardScheme getScheme() {
        return new frequentPass_resultStandardScheme();
      }
    }

    private static class frequentPass_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<frequentPass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, frequentPass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list96.size);
                  AccompanyAyalyzeResult _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new AccompanyAyalyzeResult();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, frequentPass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AccompanyAyalyzeResult _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class frequentPass_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frequentPass_resultTupleScheme getScheme() {
        return new frequentPass_resultTupleScheme();
      }
    }

    private static class frequentPass_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<frequentPass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, frequentPass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AccompanyAyalyzeResult _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, frequentPass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list101.size);
            AccompanyAyalyzeResult _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new AccompanyAyalyzeResult();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class faceTracking_args implements org.apache.thrift.TBase<faceTracking_args, faceTracking_args._Fields>, java.io.Serializable, Cloneable, Comparable<faceTracking_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceTracking_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new faceTracking_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new faceTracking_argsTupleSchemeFactory();

    public SearchImgByImgInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgByImgInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceTracking_args.class, metaDataMap);
    }

    public faceTracking_args() {
    }

    public faceTracking_args(
      SearchImgByImgInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceTracking_args(faceTracking_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchImgByImgInputRecord(other.record);
      }
    }

    public faceTracking_args deepCopy() {
      return new faceTracking_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchImgByImgInputRecord getRecord() {
      return this.record;
    }

    public faceTracking_args setRecord(SearchImgByImgInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchImgByImgInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof faceTracking_args)
        return this.equals((faceTracking_args)that);
      return false;
    }

    public boolean equals(faceTracking_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(faceTracking_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("faceTracking_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceTracking_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public faceTracking_argsStandardScheme getScheme() {
        return new faceTracking_argsStandardScheme();
      }
    }

    private static class faceTracking_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<faceTracking_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceTracking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchImgByImgInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceTracking_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceTracking_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public faceTracking_argsTupleScheme getScheme() {
        return new faceTracking_argsTupleScheme();
      }
    }

    private static class faceTracking_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<faceTracking_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceTracking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceTracking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchImgByImgInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class faceTracking_result implements org.apache.thrift.TBase<faceTracking_result, faceTracking_result._Fields>, java.io.Serializable, Cloneable, Comparable<faceTracking_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceTracking_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new faceTracking_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new faceTracking_resultTupleSchemeFactory();

    public java.util.List<FaceTrackingResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FaceTrackingResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceTracking_result.class, metaDataMap);
    }

    public faceTracking_result() {
    }

    public faceTracking_result(
      java.util.List<FaceTrackingResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceTracking_result(faceTracking_result other) {
      if (other.isSetSuccess()) {
        java.util.List<FaceTrackingResult> __this__success = new java.util.ArrayList<FaceTrackingResult>(other.success.size());
        for (FaceTrackingResult other_element : other.success) {
          __this__success.add(new FaceTrackingResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public faceTracking_result deepCopy() {
      return new faceTracking_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FaceTrackingResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FaceTrackingResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<FaceTrackingResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<FaceTrackingResult> getSuccess() {
      return this.success;
    }

    public faceTracking_result setSuccess(java.util.List<FaceTrackingResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<FaceTrackingResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof faceTracking_result)
        return this.equals((faceTracking_result)that);
      return false;
    }

    public boolean equals(faceTracking_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(faceTracking_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("faceTracking_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceTracking_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public faceTracking_resultStandardScheme getScheme() {
        return new faceTracking_resultStandardScheme();
      }
    }

    private static class faceTracking_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<faceTracking_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceTracking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<FaceTrackingResult>(_list104.size);
                  FaceTrackingResult _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new FaceTrackingResult();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceTracking_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FaceTrackingResult _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceTracking_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public faceTracking_resultTupleScheme getScheme() {
        return new faceTracking_resultTupleScheme();
      }
    }

    private static class faceTracking_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<faceTracking_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceTracking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FaceTrackingResult _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceTracking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<FaceTrackingResult>(_list109.size);
            FaceTrackingResult _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new FaceTrackingResult();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchHumanByTrack_args implements org.apache.thrift.TBase<searchHumanByTrack_args, searchHumanByTrack_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchHumanByTrack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHumanByTrack_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchHumanByTrack_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchHumanByTrack_argsTupleSchemeFactory();

    public SearchHumanByTrackInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchHumanByTrackInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHumanByTrack_args.class, metaDataMap);
    }

    public searchHumanByTrack_args() {
    }

    public searchHumanByTrack_args(
      SearchHumanByTrackInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHumanByTrack_args(searchHumanByTrack_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchHumanByTrackInputRecord(other.record);
      }
    }

    public searchHumanByTrack_args deepCopy() {
      return new searchHumanByTrack_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchHumanByTrackInputRecord getRecord() {
      return this.record;
    }

    public searchHumanByTrack_args setRecord(SearchHumanByTrackInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchHumanByTrackInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHumanByTrack_args)
        return this.equals((searchHumanByTrack_args)that);
      return false;
    }

    public boolean equals(searchHumanByTrack_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchHumanByTrack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchHumanByTrack_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHumanByTrack_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchHumanByTrack_argsStandardScheme getScheme() {
        return new searchHumanByTrack_argsStandardScheme();
      }
    }

    private static class searchHumanByTrack_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchHumanByTrack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHumanByTrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchHumanByTrackInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHumanByTrack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHumanByTrack_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchHumanByTrack_argsTupleScheme getScheme() {
        return new searchHumanByTrack_argsTupleScheme();
      }
    }

    private static class searchHumanByTrack_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchHumanByTrack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHumanByTrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHumanByTrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchHumanByTrackInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchHumanByTrack_result implements org.apache.thrift.TBase<searchHumanByTrack_result, searchHumanByTrack_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchHumanByTrack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHumanByTrack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchHumanByTrack_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchHumanByTrack_resultTupleSchemeFactory();

    public java.util.List<AccompanyAyalyzeResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccompanyAyalyzeResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHumanByTrack_result.class, metaDataMap);
    }

    public searchHumanByTrack_result() {
    }

    public searchHumanByTrack_result(
      java.util.List<AccompanyAyalyzeResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHumanByTrack_result(searchHumanByTrack_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AccompanyAyalyzeResult> __this__success = new java.util.ArrayList<AccompanyAyalyzeResult>(other.success.size());
        for (AccompanyAyalyzeResult other_element : other.success) {
          __this__success.add(new AccompanyAyalyzeResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public searchHumanByTrack_result deepCopy() {
      return new searchHumanByTrack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AccompanyAyalyzeResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AccompanyAyalyzeResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AccompanyAyalyzeResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<AccompanyAyalyzeResult> getSuccess() {
      return this.success;
    }

    public searchHumanByTrack_result setSuccess(java.util.List<AccompanyAyalyzeResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AccompanyAyalyzeResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHumanByTrack_result)
        return this.equals((searchHumanByTrack_result)that);
      return false;
    }

    public boolean equals(searchHumanByTrack_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchHumanByTrack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchHumanByTrack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHumanByTrack_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchHumanByTrack_resultStandardScheme getScheme() {
        return new searchHumanByTrack_resultStandardScheme();
      }
    }

    private static class searchHumanByTrack_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchHumanByTrack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHumanByTrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list112.size);
                  AccompanyAyalyzeResult _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new AccompanyAyalyzeResult();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHumanByTrack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AccompanyAyalyzeResult _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHumanByTrack_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchHumanByTrack_resultTupleScheme getScheme() {
        return new searchHumanByTrack_resultTupleScheme();
      }
    }

    private static class searchHumanByTrack_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchHumanByTrack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHumanByTrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AccompanyAyalyzeResult _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHumanByTrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<AccompanyAyalyzeResult>(_list117.size);
            AccompanyAyalyzeResult _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new AccompanyAyalyzeResult();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByImg_args implements org.apache.thrift.TBase<searchFaceImgByImg_args, searchFaceImgByImg_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByImg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByImg_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByImg_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByImg_argsTupleSchemeFactory();

    public SearchImgByImgInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgByImgInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByImg_args.class, metaDataMap);
    }

    public searchFaceImgByImg_args() {
    }

    public searchFaceImgByImg_args(
      SearchImgByImgInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByImg_args(searchFaceImgByImg_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchImgByImgInputRecord(other.record);
      }
    }

    public searchFaceImgByImg_args deepCopy() {
      return new searchFaceImgByImg_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchImgByImgInputRecord getRecord() {
      return this.record;
    }

    public searchFaceImgByImg_args setRecord(SearchImgByImgInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchImgByImgInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByImg_args)
        return this.equals((searchFaceImgByImg_args)that);
      return false;
    }

    public boolean equals(searchFaceImgByImg_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByImg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByImg_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByImg_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByImg_argsStandardScheme getScheme() {
        return new searchFaceImgByImg_argsStandardScheme();
      }
    }

    private static class searchFaceImgByImg_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByImg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByImg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchImgByImgInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByImg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByImg_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByImg_argsTupleScheme getScheme() {
        return new searchFaceImgByImg_argsTupleScheme();
      }
    }

    private static class searchFaceImgByImg_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByImg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByImg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByImg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchImgByImgInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByImg_result implements org.apache.thrift.TBase<searchFaceImgByImg_result, searchFaceImgByImg_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByImg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByImg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByImg_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByImg_resultTupleSchemeFactory();

    public java.util.List<SearchImgResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByImg_result.class, metaDataMap);
    }

    public searchFaceImgByImg_result() {
    }

    public searchFaceImgByImg_result(
      java.util.List<SearchImgResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByImg_result(searchFaceImgByImg_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SearchImgResult> __this__success = new java.util.ArrayList<SearchImgResult>(other.success.size());
        for (SearchImgResult other_element : other.success) {
          __this__success.add(new SearchImgResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public searchFaceImgByImg_result deepCopy() {
      return new searchFaceImgByImg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SearchImgResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SearchImgResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SearchImgResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<SearchImgResult> getSuccess() {
      return this.success;
    }

    public searchFaceImgByImg_result setSuccess(java.util.List<SearchImgResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SearchImgResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByImg_result)
        return this.equals((searchFaceImgByImg_result)that);
      return false;
    }

    public boolean equals(searchFaceImgByImg_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByImg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByImg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByImg_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByImg_resultStandardScheme getScheme() {
        return new searchFaceImgByImg_resultStandardScheme();
      }
    }

    private static class searchFaceImgByImg_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByImg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByImg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SearchImgResult>(_list120.size);
                  SearchImgResult _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new SearchImgResult();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByImg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SearchImgResult _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByImg_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByImg_resultTupleScheme getScheme() {
        return new searchFaceImgByImg_resultTupleScheme();
      }
    }

    private static class searchFaceImgByImg_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByImg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByImg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SearchImgResult _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByImg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SearchImgResult>(_list125.size);
            SearchImgResult _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new SearchImgResult();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByLog_args implements org.apache.thrift.TBase<searchFaceImgByLog_args, searchFaceImgByLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByLog_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByLog_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByLog_argsTupleSchemeFactory();

    public SearchImgByLogInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgByLogInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByLog_args.class, metaDataMap);
    }

    public searchFaceImgByLog_args() {
    }

    public searchFaceImgByLog_args(
      SearchImgByLogInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByLog_args(searchFaceImgByLog_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchImgByLogInputRecord(other.record);
      }
    }

    public searchFaceImgByLog_args deepCopy() {
      return new searchFaceImgByLog_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchImgByLogInputRecord getRecord() {
      return this.record;
    }

    public searchFaceImgByLog_args setRecord(SearchImgByLogInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchImgByLogInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByLog_args)
        return this.equals((searchFaceImgByLog_args)that);
      return false;
    }

    public boolean equals(searchFaceImgByLog_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByLog_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByLog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByLog_argsStandardScheme getScheme() {
        return new searchFaceImgByLog_argsStandardScheme();
      }
    }

    private static class searchFaceImgByLog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchImgByLogInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByLog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByLog_argsTupleScheme getScheme() {
        return new searchFaceImgByLog_argsTupleScheme();
      }
    }

    private static class searchFaceImgByLog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchImgByLogInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByLog_result implements org.apache.thrift.TBase<searchFaceImgByLog_result, searchFaceImgByLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByLog_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByLog_resultTupleSchemeFactory();

    public java.util.List<SearchImgResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgResult.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByLog_result.class, metaDataMap);
    }

    public searchFaceImgByLog_result() {
    }

    public searchFaceImgByLog_result(
      java.util.List<SearchImgResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByLog_result(searchFaceImgByLog_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SearchImgResult> __this__success = new java.util.ArrayList<SearchImgResult>(other.success.size());
        for (SearchImgResult other_element : other.success) {
          __this__success.add(new SearchImgResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public searchFaceImgByLog_result deepCopy() {
      return new searchFaceImgByLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SearchImgResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SearchImgResult elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SearchImgResult>();
      }
      this.success.add(elem);
    }

    public java.util.List<SearchImgResult> getSuccess() {
      return this.success;
    }

    public searchFaceImgByLog_result setSuccess(java.util.List<SearchImgResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SearchImgResult>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByLog_result)
        return this.equals((searchFaceImgByLog_result)that);
      return false;
    }

    public boolean equals(searchFaceImgByLog_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByLog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByLog_resultStandardScheme getScheme() {
        return new searchFaceImgByLog_resultStandardScheme();
      }
    }

    private static class searchFaceImgByLog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SearchImgResult>(_list128.size);
                  SearchImgResult _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new SearchImgResult();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SearchImgResult _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByLog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByLog_resultTupleScheme getScheme() {
        return new searchFaceImgByLog_resultTupleScheme();
      }
    }

    private static class searchFaceImgByLog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SearchImgResult _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SearchImgResult>(_list133.size);
            SearchImgResult _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new SearchImgResult();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class featureVerify_args implements org.apache.thrift.TBase<featureVerify_args, featureVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<featureVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("featureVerify_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new featureVerify_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new featureVerify_argsTupleSchemeFactory();

    public FeatureVerifyRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureVerifyRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(featureVerify_args.class, metaDataMap);
    }

    public featureVerify_args() {
    }

    public featureVerify_args(
      FeatureVerifyRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public featureVerify_args(featureVerify_args other) {
      if (other.isSetRecord()) {
        this.record = new FeatureVerifyRecord(other.record);
      }
    }

    public featureVerify_args deepCopy() {
      return new featureVerify_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public FeatureVerifyRecord getRecord() {
      return this.record;
    }

    public featureVerify_args setRecord(FeatureVerifyRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((FeatureVerifyRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof featureVerify_args)
        return this.equals((featureVerify_args)that);
      return false;
    }

    public boolean equals(featureVerify_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(featureVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("featureVerify_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class featureVerify_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public featureVerify_argsStandardScheme getScheme() {
        return new featureVerify_argsStandardScheme();
      }
    }

    private static class featureVerify_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<featureVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, featureVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new FeatureVerifyRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, featureVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class featureVerify_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public featureVerify_argsTupleScheme getScheme() {
        return new featureVerify_argsTupleScheme();
      }
    }

    private static class featureVerify_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<featureVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, featureVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, featureVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new FeatureVerifyRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class featureVerify_result implements org.apache.thrift.TBase<featureVerify_result, featureVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<featureVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("featureVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new featureVerify_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new featureVerify_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(featureVerify_result.class, metaDataMap);
    }

    public featureVerify_result() {
    }

    public featureVerify_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public featureVerify_result(featureVerify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public featureVerify_result deepCopy() {
      return new featureVerify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public featureVerify_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof featureVerify_result)
        return this.equals((featureVerify_result)that);
      return false;
    }

    public boolean equals(featureVerify_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(featureVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("featureVerify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class featureVerify_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public featureVerify_resultStandardScheme getScheme() {
        return new featureVerify_resultStandardScheme();
      }
    }

    private static class featureVerify_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<featureVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, featureVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, featureVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class featureVerify_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public featureVerify_resultTupleScheme getScheme() {
        return new featureVerify_resultTupleScheme();
      }
    }

    private static class featureVerify_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<featureVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, featureVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, featureVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByAssist_args implements org.apache.thrift.TBase<searchFaceImgByAssist_args, searchFaceImgByAssist_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByAssist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByAssist_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByAssist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByAssist_argsTupleSchemeFactory();

    public SearchImgByAssistInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgByAssistInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByAssist_args.class, metaDataMap);
    }

    public searchFaceImgByAssist_args() {
    }

    public searchFaceImgByAssist_args(
      SearchImgByAssistInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByAssist_args(searchFaceImgByAssist_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchImgByAssistInputRecord(other.record);
      }
    }

    public searchFaceImgByAssist_args deepCopy() {
      return new searchFaceImgByAssist_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchImgByAssistInputRecord getRecord() {
      return this.record;
    }

    public searchFaceImgByAssist_args setRecord(SearchImgByAssistInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchImgByAssistInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByAssist_args)
        return this.equals((searchFaceImgByAssist_args)that);
      return false;
    }

    public boolean equals(searchFaceImgByAssist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByAssist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByAssist_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByAssist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByAssist_argsStandardScheme getScheme() {
        return new searchFaceImgByAssist_argsStandardScheme();
      }
    }

    private static class searchFaceImgByAssist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByAssist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByAssist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchImgByAssistInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByAssist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByAssist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByAssist_argsTupleScheme getScheme() {
        return new searchFaceImgByAssist_argsTupleScheme();
      }
    }

    private static class searchFaceImgByAssist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByAssist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByAssist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByAssist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchImgByAssistInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFaceImgByAssist_result implements org.apache.thrift.TBase<searchFaceImgByAssist_result, searchFaceImgByAssist_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFaceImgByAssist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFaceImgByAssist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFaceImgByAssist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFaceImgByAssist_resultTupleSchemeFactory();

    public SearchImgByAssistResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchImgByAssistResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFaceImgByAssist_result.class, metaDataMap);
    }

    public searchFaceImgByAssist_result() {
    }

    public searchFaceImgByAssist_result(
      SearchImgByAssistResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFaceImgByAssist_result(searchFaceImgByAssist_result other) {
      if (other.isSetSuccess()) {
        this.success = new SearchImgByAssistResponse(other.success);
      }
    }

    public searchFaceImgByAssist_result deepCopy() {
      return new searchFaceImgByAssist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SearchImgByAssistResponse getSuccess() {
      return this.success;
    }

    public searchFaceImgByAssist_result setSuccess(SearchImgByAssistResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SearchImgByAssistResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFaceImgByAssist_result)
        return this.equals((searchFaceImgByAssist_result)that);
      return false;
    }

    public boolean equals(searchFaceImgByAssist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFaceImgByAssist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFaceImgByAssist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFaceImgByAssist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByAssist_resultStandardScheme getScheme() {
        return new searchFaceImgByAssist_resultStandardScheme();
      }
    }

    private static class searchFaceImgByAssist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFaceImgByAssist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFaceImgByAssist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SearchImgByAssistResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFaceImgByAssist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFaceImgByAssist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFaceImgByAssist_resultTupleScheme getScheme() {
        return new searchFaceImgByAssist_resultTupleScheme();
      }
    }

    private static class searchFaceImgByAssist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFaceImgByAssist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByAssist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFaceImgByAssist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SearchImgByAssistResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFeatureByLog_args implements org.apache.thrift.TBase<searchFeatureByLog_args, searchFeatureByLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFeatureByLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFeatureByLog_args");

    private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFeatureByLog_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFeatureByLog_argsTupleSchemeFactory();

    public SearchFeatureByLogInputRecord record; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD((short)1, "record");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD
            return RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchFeatureByLogInputRecord.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFeatureByLog_args.class, metaDataMap);
    }

    public searchFeatureByLog_args() {
    }

    public searchFeatureByLog_args(
      SearchFeatureByLogInputRecord record)
    {
      this();
      this.record = record;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFeatureByLog_args(searchFeatureByLog_args other) {
      if (other.isSetRecord()) {
        this.record = new SearchFeatureByLogInputRecord(other.record);
      }
    }

    public searchFeatureByLog_args deepCopy() {
      return new searchFeatureByLog_args(this);
    }

    @Override
    public void clear() {
      this.record = null;
    }

    public SearchFeatureByLogInputRecord getRecord() {
      return this.record;
    }

    public searchFeatureByLog_args setRecord(SearchFeatureByLogInputRecord record) {
      this.record = record;
      return this;
    }

    public void unsetRecord() {
      this.record = null;
    }

    /** Returns true if field record is set (has been assigned a value) and false otherwise */
    public boolean isSetRecord() {
      return this.record != null;
    }

    public void setRecordIsSet(boolean value) {
      if (!value) {
        this.record = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RECORD:
        if (value == null) {
          unsetRecord();
        } else {
          setRecord((SearchFeatureByLogInputRecord)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD:
        return getRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RECORD:
        return isSetRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFeatureByLog_args)
        return this.equals((searchFeatureByLog_args)that);
      return false;
    }

    public boolean equals(searchFeatureByLog_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_record = true && this.isSetRecord();
      boolean that_present_record = true && that.isSetRecord();
      if (this_present_record || that_present_record) {
        if (!(this_present_record && that_present_record))
          return false;
        if (!this.record.equals(that.record))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRecord()) ? 131071 : 524287);
      if (isSetRecord())
        hashCode = hashCode * 8191 + record.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFeatureByLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFeatureByLog_args(");
      boolean first = true;

      sb.append("record:");
      if (this.record == null) {
        sb.append("null");
      } else {
        sb.append(this.record);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (record != null) {
        record.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFeatureByLog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFeatureByLog_argsStandardScheme getScheme() {
        return new searchFeatureByLog_argsStandardScheme();
      }
    }

    private static class searchFeatureByLog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFeatureByLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFeatureByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.record = new SearchFeatureByLogInputRecord();
                struct.record.read(iprot);
                struct.setRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFeatureByLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.record != null) {
          oprot.writeFieldBegin(RECORD_FIELD_DESC);
          struct.record.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFeatureByLog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFeatureByLog_argsTupleScheme getScheme() {
        return new searchFeatureByLog_argsTupleScheme();
      }
    }

    private static class searchFeatureByLog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFeatureByLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFeatureByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecord()) {
          struct.record.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFeatureByLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.record = new SearchFeatureByLogInputRecord();
          struct.record.read(iprot);
          struct.setRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchFeatureByLog_result implements org.apache.thrift.TBase<searchFeatureByLog_result, searchFeatureByLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFeatureByLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFeatureByLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchFeatureByLog_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchFeatureByLog_resultTupleSchemeFactory();

    public SearchFeatureByLogResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchFeatureByLogResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFeatureByLog_result.class, metaDataMap);
    }

    public searchFeatureByLog_result() {
    }

    public searchFeatureByLog_result(
      SearchFeatureByLogResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFeatureByLog_result(searchFeatureByLog_result other) {
      if (other.isSetSuccess()) {
        this.success = new SearchFeatureByLogResponse(other.success);
      }
    }

    public searchFeatureByLog_result deepCopy() {
      return new searchFeatureByLog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SearchFeatureByLogResponse getSuccess() {
      return this.success;
    }

    public searchFeatureByLog_result setSuccess(SearchFeatureByLogResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SearchFeatureByLogResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFeatureByLog_result)
        return this.equals((searchFeatureByLog_result)that);
      return false;
    }

    public boolean equals(searchFeatureByLog_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchFeatureByLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchFeatureByLog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFeatureByLog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFeatureByLog_resultStandardScheme getScheme() {
        return new searchFeatureByLog_resultStandardScheme();
      }
    }

    private static class searchFeatureByLog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchFeatureByLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFeatureByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SearchFeatureByLogResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFeatureByLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFeatureByLog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchFeatureByLog_resultTupleScheme getScheme() {
        return new searchFeatureByLog_resultTupleScheme();
      }
    }

    private static class searchFeatureByLog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchFeatureByLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFeatureByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFeatureByLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SearchFeatureByLogResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
