/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.face.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-13")
public class SearchImgResult implements org.apache.thrift.TBase<SearchImgResult, SearchImgResult._Fields>, java.io.Serializable, Cloneable, Comparable<SearchImgResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchImgResult");

  private static final org.apache.thrift.protocol.TField LOG_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("logNum", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAMERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GATHER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("gatherTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchImgResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchImgResultTupleSchemeFactory();

  public String logNum; // required
  public String cameraId; // required
  public long gatherTime; // required
  public double score; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_NUM((short)1, "logNum"),
    CAMERA_ID((short)2, "cameraId"),
    GATHER_TIME((short)3, "gatherTime"),
    SCORE((short)4, "score");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_NUM
          return LOG_NUM;
        case 2: // CAMERA_ID
          return CAMERA_ID;
        case 3: // GATHER_TIME
          return GATHER_TIME;
        case 4: // SCORE
          return SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GATHERTIME_ISSET_ID = 0;
  private static final int __SCORE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_NUM, new org.apache.thrift.meta_data.FieldMetaData("logNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMERA_ID, new org.apache.thrift.meta_data.FieldMetaData("cameraId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GATHER_TIME, new org.apache.thrift.meta_data.FieldMetaData("gatherTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchImgResult.class, metaDataMap);
  }

  public SearchImgResult() {
  }

  public SearchImgResult(
    String logNum,
    String cameraId,
    long gatherTime,
    double score)
  {
    this();
    this.logNum = logNum;
    this.cameraId = cameraId;
    this.gatherTime = gatherTime;
    setGatherTimeIsSet(true);
    this.score = score;
    setScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchImgResult(SearchImgResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLogNum()) {
      this.logNum = other.logNum;
    }
    if (other.isSetCameraId()) {
      this.cameraId = other.cameraId;
    }
    this.gatherTime = other.gatherTime;
    this.score = other.score;
  }

  public SearchImgResult deepCopy() {
    return new SearchImgResult(this);
  }

  @Override
  public void clear() {
    this.logNum = null;
    this.cameraId = null;
    setGatherTimeIsSet(false);
    this.gatherTime = 0;
    setScoreIsSet(false);
    this.score = 0.0;
  }

  public String getLogNum() {
    return this.logNum;
  }

  public SearchImgResult setLogNum(String logNum) {
    this.logNum = logNum;
    return this;
  }

  public void unsetLogNum() {
    this.logNum = null;
  }

  /** Returns true if field logNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLogNum() {
    return this.logNum != null;
  }

  public void setLogNumIsSet(boolean value) {
    if (!value) {
      this.logNum = null;
    }
  }

  public String getCameraId() {
    return this.cameraId;
  }

  public SearchImgResult setCameraId(String cameraId) {
    this.cameraId = cameraId;
    return this;
  }

  public void unsetCameraId() {
    this.cameraId = null;
  }

  /** Returns true if field cameraId is set (has been assigned a value) and false otherwise */
  public boolean isSetCameraId() {
    return this.cameraId != null;
  }

  public void setCameraIdIsSet(boolean value) {
    if (!value) {
      this.cameraId = null;
    }
  }

  public long getGatherTime() {
    return this.gatherTime;
  }

  public SearchImgResult setGatherTime(long gatherTime) {
    this.gatherTime = gatherTime;
    setGatherTimeIsSet(true);
    return this;
  }

  public void unsetGatherTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GATHERTIME_ISSET_ID);
  }

  /** Returns true if field gatherTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGatherTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GATHERTIME_ISSET_ID);
  }

  public void setGatherTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GATHERTIME_ISSET_ID, value);
  }

  public double getScore() {
    return this.score;
  }

  public SearchImgResult setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOG_NUM:
      if (value == null) {
        unsetLogNum();
      } else {
        setLogNum((String)value);
      }
      break;

    case CAMERA_ID:
      if (value == null) {
        unsetCameraId();
      } else {
        setCameraId((String)value);
      }
      break;

    case GATHER_TIME:
      if (value == null) {
        unsetGatherTime();
      } else {
        setGatherTime((Long)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_NUM:
      return getLogNum();

    case CAMERA_ID:
      return getCameraId();

    case GATHER_TIME:
      return getGatherTime();

    case SCORE:
      return getScore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOG_NUM:
      return isSetLogNum();
    case CAMERA_ID:
      return isSetCameraId();
    case GATHER_TIME:
      return isSetGatherTime();
    case SCORE:
      return isSetScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchImgResult)
      return this.equals((SearchImgResult)that);
    return false;
  }

  public boolean equals(SearchImgResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_logNum = true && this.isSetLogNum();
    boolean that_present_logNum = true && that.isSetLogNum();
    if (this_present_logNum || that_present_logNum) {
      if (!(this_present_logNum && that_present_logNum))
        return false;
      if (!this.logNum.equals(that.logNum))
        return false;
    }

    boolean this_present_cameraId = true && this.isSetCameraId();
    boolean that_present_cameraId = true && that.isSetCameraId();
    if (this_present_cameraId || that_present_cameraId) {
      if (!(this_present_cameraId && that_present_cameraId))
        return false;
      if (!this.cameraId.equals(that.cameraId))
        return false;
    }

    boolean this_present_gatherTime = true;
    boolean that_present_gatherTime = true;
    if (this_present_gatherTime || that_present_gatherTime) {
      if (!(this_present_gatherTime && that_present_gatherTime))
        return false;
      if (this.gatherTime != that.gatherTime)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLogNum()) ? 131071 : 524287);
    if (isSetLogNum())
      hashCode = hashCode * 8191 + logNum.hashCode();

    hashCode = hashCode * 8191 + ((isSetCameraId()) ? 131071 : 524287);
    if (isSetCameraId())
      hashCode = hashCode * 8191 + cameraId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gatherTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(score);

    return hashCode;
  }

  @Override
  public int compareTo(SearchImgResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLogNum()).compareTo(other.isSetLogNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logNum, other.logNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCameraId()).compareTo(other.isSetCameraId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCameraId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraId, other.cameraId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGatherTime()).compareTo(other.isSetGatherTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGatherTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatherTime, other.gatherTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchImgResult(");
    boolean first = true;

    sb.append("logNum:");
    if (this.logNum == null) {
      sb.append("null");
    } else {
      sb.append(this.logNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cameraId:");
    if (this.cameraId == null) {
      sb.append("null");
    } else {
      sb.append(this.cameraId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gatherTime:");
    sb.append(this.gatherTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchImgResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchImgResultStandardScheme getScheme() {
      return new SearchImgResultStandardScheme();
    }
  }

  private static class SearchImgResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchImgResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchImgResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logNum = iprot.readString();
              struct.setLogNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAMERA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cameraId = iprot.readString();
              struct.setCameraIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GATHER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gatherTime = iprot.readI64();
              struct.setGatherTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchImgResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.logNum != null) {
        oprot.writeFieldBegin(LOG_NUM_FIELD_DESC);
        oprot.writeString(struct.logNum);
        oprot.writeFieldEnd();
      }
      if (struct.cameraId != null) {
        oprot.writeFieldBegin(CAMERA_ID_FIELD_DESC);
        oprot.writeString(struct.cameraId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GATHER_TIME_FIELD_DESC);
      oprot.writeI64(struct.gatherTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchImgResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchImgResultTupleScheme getScheme() {
      return new SearchImgResultTupleScheme();
    }
  }

  private static class SearchImgResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchImgResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchImgResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLogNum()) {
        optionals.set(0);
      }
      if (struct.isSetCameraId()) {
        optionals.set(1);
      }
      if (struct.isSetGatherTime()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLogNum()) {
        oprot.writeString(struct.logNum);
      }
      if (struct.isSetCameraId()) {
        oprot.writeString(struct.cameraId);
      }
      if (struct.isSetGatherTime()) {
        oprot.writeI64(struct.gatherTime);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchImgResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.logNum = iprot.readString();
        struct.setLogNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cameraId = iprot.readString();
        struct.setCameraIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gatherTime = iprot.readI64();
        struct.setGatherTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

