/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.face.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-13")
public class CollisionAyalyzeInputRecord implements org.apache.thrift.TBase<CollisionAyalyzeInputRecord, CollisionAyalyzeInputRecord._Fields>, java.io.Serializable, Cloneable, Comparable<CollisionAyalyzeInputRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollisionAyalyzeInputRecord");

  private static final org.apache.thrift.protocol.TField REGION_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("regionRecords", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distence", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CollisionAyalyzeInputRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CollisionAyalyzeInputRecordTupleSchemeFactory();

  public java.util.List<RegionRecord> regionRecords; // required
  public int regionCount; // required
  public int distence; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REGION_RECORDS((short)1, "regionRecords"),
    REGION_COUNT((short)2, "regionCount"),
    DISTENCE((short)3, "distence");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGION_RECORDS
          return REGION_RECORDS;
        case 2: // REGION_COUNT
          return REGION_COUNT;
        case 3: // DISTENCE
          return DISTENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGIONCOUNT_ISSET_ID = 0;
  private static final int __DISTENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGION_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("regionRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegionRecord.class))));
    tmpMap.put(_Fields.REGION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("regionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTENCE, new org.apache.thrift.meta_data.FieldMetaData("distence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollisionAyalyzeInputRecord.class, metaDataMap);
  }

  public CollisionAyalyzeInputRecord() {
  }

  public CollisionAyalyzeInputRecord(
    java.util.List<RegionRecord> regionRecords,
    int regionCount,
    int distence)
  {
    this();
    this.regionRecords = regionRecords;
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    this.distence = distence;
    setDistenceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollisionAyalyzeInputRecord(CollisionAyalyzeInputRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRegionRecords()) {
      java.util.List<RegionRecord> __this__regionRecords = new java.util.ArrayList<RegionRecord>(other.regionRecords.size());
      for (RegionRecord other_element : other.regionRecords) {
        __this__regionRecords.add(new RegionRecord(other_element));
      }
      this.regionRecords = __this__regionRecords;
    }
    this.regionCount = other.regionCount;
    this.distence = other.distence;
  }

  public CollisionAyalyzeInputRecord deepCopy() {
    return new CollisionAyalyzeInputRecord(this);
  }

  @Override
  public void clear() {
    this.regionRecords = null;
    setRegionCountIsSet(false);
    this.regionCount = 0;
    setDistenceIsSet(false);
    this.distence = 0;
  }

  public int getRegionRecordsSize() {
    return (this.regionRecords == null) ? 0 : this.regionRecords.size();
  }

  public java.util.Iterator<RegionRecord> getRegionRecordsIterator() {
    return (this.regionRecords == null) ? null : this.regionRecords.iterator();
  }

  public void addToRegionRecords(RegionRecord elem) {
    if (this.regionRecords == null) {
      this.regionRecords = new java.util.ArrayList<RegionRecord>();
    }
    this.regionRecords.add(elem);
  }

  public java.util.List<RegionRecord> getRegionRecords() {
    return this.regionRecords;
  }

  public CollisionAyalyzeInputRecord setRegionRecords(java.util.List<RegionRecord> regionRecords) {
    this.regionRecords = regionRecords;
    return this;
  }

  public void unsetRegionRecords() {
    this.regionRecords = null;
  }

  /** Returns true if field regionRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionRecords() {
    return this.regionRecords != null;
  }

  public void setRegionRecordsIsSet(boolean value) {
    if (!value) {
      this.regionRecords = null;
    }
  }

  public int getRegionCount() {
    return this.regionCount;
  }

  public CollisionAyalyzeInputRecord setRegionCount(int regionCount) {
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    return this;
  }

  public void unsetRegionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  /** Returns true if field regionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  public void setRegionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID, value);
  }

  public int getDistence() {
    return this.distence;
  }

  public CollisionAyalyzeInputRecord setDistence(int distence) {
    this.distence = distence;
    setDistenceIsSet(true);
    return this;
  }

  public void unsetDistence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTENCE_ISSET_ID);
  }

  /** Returns true if field distence is set (has been assigned a value) and false otherwise */
  public boolean isSetDistence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTENCE_ISSET_ID);
  }

  public void setDistenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTENCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGION_RECORDS:
      if (value == null) {
        unsetRegionRecords();
      } else {
        setRegionRecords((java.util.List<RegionRecord>)value);
      }
      break;

    case REGION_COUNT:
      if (value == null) {
        unsetRegionCount();
      } else {
        setRegionCount((Integer)value);
      }
      break;

    case DISTENCE:
      if (value == null) {
        unsetDistence();
      } else {
        setDistence((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGION_RECORDS:
      return getRegionRecords();

    case REGION_COUNT:
      return getRegionCount();

    case DISTENCE:
      return getDistence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGION_RECORDS:
      return isSetRegionRecords();
    case REGION_COUNT:
      return isSetRegionCount();
    case DISTENCE:
      return isSetDistence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollisionAyalyzeInputRecord)
      return this.equals((CollisionAyalyzeInputRecord)that);
    return false;
  }

  public boolean equals(CollisionAyalyzeInputRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_regionRecords = true && this.isSetRegionRecords();
    boolean that_present_regionRecords = true && that.isSetRegionRecords();
    if (this_present_regionRecords || that_present_regionRecords) {
      if (!(this_present_regionRecords && that_present_regionRecords))
        return false;
      if (!this.regionRecords.equals(that.regionRecords))
        return false;
    }

    boolean this_present_regionCount = true;
    boolean that_present_regionCount = true;
    if (this_present_regionCount || that_present_regionCount) {
      if (!(this_present_regionCount && that_present_regionCount))
        return false;
      if (this.regionCount != that.regionCount)
        return false;
    }

    boolean this_present_distence = true;
    boolean that_present_distence = true;
    if (this_present_distence || that_present_distence) {
      if (!(this_present_distence && that_present_distence))
        return false;
      if (this.distence != that.distence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRegionRecords()) ? 131071 : 524287);
    if (isSetRegionRecords())
      hashCode = hashCode * 8191 + regionRecords.hashCode();

    hashCode = hashCode * 8191 + regionCount;

    hashCode = hashCode * 8191 + distence;

    return hashCode;
  }

  @Override
  public int compareTo(CollisionAyalyzeInputRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegionRecords()).compareTo(other.isSetRegionRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionRecords, other.regionRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionCount()).compareTo(other.isSetRegionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCount, other.regionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistence()).compareTo(other.isSetDistence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distence, other.distence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollisionAyalyzeInputRecord(");
    boolean first = true;

    sb.append("regionRecords:");
    if (this.regionRecords == null) {
      sb.append("null");
    } else {
      sb.append(this.regionRecords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCount:");
    sb.append(this.regionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distence:");
    sb.append(this.distence);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollisionAyalyzeInputRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollisionAyalyzeInputRecordStandardScheme getScheme() {
      return new CollisionAyalyzeInputRecordStandardScheme();
    }
  }

  private static class CollisionAyalyzeInputRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<CollisionAyalyzeInputRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollisionAyalyzeInputRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGION_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.regionRecords = new java.util.ArrayList<RegionRecord>(_list8.size);
                RegionRecord _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new RegionRecord();
                  _elem9.read(iprot);
                  struct.regionRecords.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRegionRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regionCount = iprot.readI32();
              struct.setRegionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distence = iprot.readI32();
              struct.setDistenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollisionAyalyzeInputRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.regionRecords != null) {
        oprot.writeFieldBegin(REGION_RECORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.regionRecords.size()));
          for (RegionRecord _iter11 : struct.regionRecords)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.regionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTENCE_FIELD_DESC);
      oprot.writeI32(struct.distence);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollisionAyalyzeInputRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CollisionAyalyzeInputRecordTupleScheme getScheme() {
      return new CollisionAyalyzeInputRecordTupleScheme();
    }
  }

  private static class CollisionAyalyzeInputRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<CollisionAyalyzeInputRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollisionAyalyzeInputRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRegionRecords()) {
        optionals.set(0);
      }
      if (struct.isSetRegionCount()) {
        optionals.set(1);
      }
      if (struct.isSetDistence()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRegionRecords()) {
        {
          oprot.writeI32(struct.regionRecords.size());
          for (RegionRecord _iter12 : struct.regionRecords)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetRegionCount()) {
        oprot.writeI32(struct.regionCount);
      }
      if (struct.isSetDistence()) {
        oprot.writeI32(struct.distence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollisionAyalyzeInputRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.regionRecords = new java.util.ArrayList<RegionRecord>(_list13.size);
          RegionRecord _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new RegionRecord();
            _elem14.read(iprot);
            struct.regionRecords.add(_elem14);
          }
        }
        struct.setRegionRecordsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.regionCount = iprot.readI32();
        struct.setRegionCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.distence = iprot.readI32();
        struct.setDistenceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

