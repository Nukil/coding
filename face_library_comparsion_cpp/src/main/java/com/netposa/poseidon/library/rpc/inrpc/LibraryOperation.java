/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.library.rpc.inrpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-05")
public class LibraryOperation implements org.apache.thrift.TBase<LibraryOperation, LibraryOperation._Fields>, java.io.Serializable, Cloneable, Comparable<LibraryOperation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LibraryOperation");

  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIBRARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LIBRARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryType", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LibraryOperationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LibraryOperationTupleSchemeFactory();

  /**
   * 
   * @see OperationType
   */
  public OperationType operationType; // required
  public java.lang.String libraryId; // required
  public short libraryType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OperationType
     */
    OPERATION_TYPE((short)1, "operationType"),
    LIBRARY_ID((short)2, "libraryId"),
    LIBRARY_TYPE((short)3, "libraryType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION_TYPE
          return OPERATION_TYPE;
        case 2: // LIBRARY_ID
          return LIBRARY_ID;
        case 3: // LIBRARY_TYPE
          return LIBRARY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIBRARYTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperationType.class)));
    tmpMap.put(_Fields.LIBRARY_ID, new org.apache.thrift.meta_data.FieldMetaData("libraryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIBRARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("libraryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LibraryOperation.class, metaDataMap);
  }

  public LibraryOperation() {
  }

  public LibraryOperation(
    OperationType operationType,
    java.lang.String libraryId,
    short libraryType)
  {
    this();
    this.operationType = operationType;
    this.libraryId = libraryId;
    this.libraryType = libraryType;
    setLibraryTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LibraryOperation(LibraryOperation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
    if (other.isSetLibraryId()) {
      this.libraryId = other.libraryId;
    }
    this.libraryType = other.libraryType;
  }

  public LibraryOperation deepCopy() {
    return new LibraryOperation(this);
  }

  @Override
  public void clear() {
    this.operationType = null;
    this.libraryId = null;
    setLibraryTypeIsSet(false);
    this.libraryType = 0;
  }

  /**
   * 
   * @see OperationType
   */
  public OperationType getOperationType() {
    return this.operationType;
  }

  /**
   * 
   * @see OperationType
   */
  public LibraryOperation setOperationType(OperationType operationType) {
    this.operationType = operationType;
    return this;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  public java.lang.String getLibraryId() {
    return this.libraryId;
  }

  public LibraryOperation setLibraryId(java.lang.String libraryId) {
    this.libraryId = libraryId;
    return this;
  }

  public void unsetLibraryId() {
    this.libraryId = null;
  }

  /** Returns true if field libraryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryId() {
    return this.libraryId != null;
  }

  public void setLibraryIdIsSet(boolean value) {
    if (!value) {
      this.libraryId = null;
    }
  }

  public short getLibraryType() {
    return this.libraryType;
  }

  public LibraryOperation setLibraryType(short libraryType) {
    this.libraryType = libraryType;
    setLibraryTypeIsSet(true);
    return this;
  }

  public void unsetLibraryType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIBRARYTYPE_ISSET_ID);
  }

  /** Returns true if field libraryType is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIBRARYTYPE_ISSET_ID);
  }

  public void setLibraryTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIBRARYTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((OperationType)value);
      }
      break;

    case LIBRARY_ID:
      if (value == null) {
        unsetLibraryId();
      } else {
        setLibraryId((java.lang.String)value);
      }
      break;

    case LIBRARY_TYPE:
      if (value == null) {
        unsetLibraryType();
      } else {
        setLibraryType((java.lang.Short)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION_TYPE:
      return getOperationType();

    case LIBRARY_ID:
      return getLibraryId();

    case LIBRARY_TYPE:
      return getLibraryType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPERATION_TYPE:
      return isSetOperationType();
    case LIBRARY_ID:
      return isSetLibraryId();
    case LIBRARY_TYPE:
      return isSetLibraryType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LibraryOperation)
      return this.equals((LibraryOperation)that);
    return false;
  }

  public boolean equals(LibraryOperation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    boolean this_present_libraryId = true && this.isSetLibraryId();
    boolean that_present_libraryId = true && that.isSetLibraryId();
    if (this_present_libraryId || that_present_libraryId) {
      if (!(this_present_libraryId && that_present_libraryId))
        return false;
      if (!this.libraryId.equals(that.libraryId))
        return false;
    }

    boolean this_present_libraryType = true;
    boolean that_present_libraryType = true;
    if (this_present_libraryType || that_present_libraryType) {
      if (!(this_present_libraryType && that_present_libraryType))
        return false;
      if (this.libraryType != that.libraryType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOperationType()) ? 131071 : 524287);
    if (isSetOperationType())
      hashCode = hashCode * 8191 + operationType.getValue();

    hashCode = hashCode * 8191 + ((isSetLibraryId()) ? 131071 : 524287);
    if (isSetLibraryId())
      hashCode = hashCode * 8191 + libraryId.hashCode();

    hashCode = hashCode * 8191 + libraryType;

    return hashCode;
  }

  @Override
  public int compareTo(LibraryOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOperationType()).compareTo(other.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, other.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLibraryId()).compareTo(other.isSetLibraryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryId, other.libraryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLibraryType()).compareTo(other.isSetLibraryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryType, other.libraryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LibraryOperation(");
    boolean first = true;

    sb.append("operationType:");
    if (this.operationType == null) {
      sb.append("null");
    } else {
      sb.append(this.operationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libraryId:");
    if (this.libraryId == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libraryType:");
    sb.append(this.libraryType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LibraryOperationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LibraryOperationStandardScheme getScheme() {
      return new LibraryOperationStandardScheme();
    }
  }

  private static class LibraryOperationStandardScheme extends org.apache.thrift.scheme.StandardScheme<LibraryOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LibraryOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationType = com.netposa.poseidon.library.rpc.inrpc.OperationType.findByValue(iprot.readI32());
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIBRARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.libraryId = iprot.readString();
              struct.setLibraryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIBRARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.libraryType = iprot.readI16();
              struct.setLibraryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LibraryOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operationType != null) {
        oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.operationType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.libraryId != null) {
        oprot.writeFieldBegin(LIBRARY_ID_FIELD_DESC);
        oprot.writeString(struct.libraryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIBRARY_TYPE_FIELD_DESC);
      oprot.writeI16(struct.libraryType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LibraryOperationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LibraryOperationTupleScheme getScheme() {
      return new LibraryOperationTupleScheme();
    }
  }

  private static class LibraryOperationTupleScheme extends org.apache.thrift.scheme.TupleScheme<LibraryOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LibraryOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOperationType()) {
        optionals.set(0);
      }
      if (struct.isSetLibraryId()) {
        optionals.set(1);
      }
      if (struct.isSetLibraryType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOperationType()) {
        oprot.writeI32(struct.operationType.getValue());
      }
      if (struct.isSetLibraryId()) {
        oprot.writeString(struct.libraryId);
      }
      if (struct.isSetLibraryType()) {
        oprot.writeI16(struct.libraryType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LibraryOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.operationType = com.netposa.poseidon.library.rpc.inrpc.OperationType.findByValue(iprot.readI32());
        struct.setOperationTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.libraryId = iprot.readString();
        struct.setLibraryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.libraryType = iprot.readI16();
        struct.setLibraryTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

