/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netposa.poseidon.library.rpc.outrpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-05")
public class QueryRequest implements org.apache.thrift.TBase<QueryRequest, QueryRequest._Fields>, java.io.Serializable, Cloneable, Comparable<QueryRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryRequest");

  private static final org.apache.thrift.protocol.TField LIBRARY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SIMILARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("similarity", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField R_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryRequestTupleSchemeFactory();

  public java.util.List<String> libraryIds; // required
  public short similarity; // required
  public int rCount; // required
  public java.nio.ByteBuffer feature; // required
  public String requestId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIBRARY_IDS((short)1, "libraryIds"),
    SIMILARITY((short)2, "similarity"),
    R_COUNT((short)3, "rCount"),
    FEATURE((short)4, "feature"),
    REQUEST_ID((short)5, "requestId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIBRARY_IDS
          return LIBRARY_IDS;
        case 2: // SIMILARITY
          return SIMILARITY;
        case 3: // R_COUNT
          return R_COUNT;
        case 4: // FEATURE
          return FEATURE;
        case 5: // REQUEST_ID
          return REQUEST_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIMILARITY_ISSET_ID = 0;
  private static final int __RCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIBRARY_IDS, new org.apache.thrift.meta_data.FieldMetaData("libraryIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SIMILARITY, new org.apache.thrift.meta_data.FieldMetaData("similarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.R_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryRequest.class, metaDataMap);
  }

  public QueryRequest() {
  }

  public QueryRequest(
    java.util.List<String> libraryIds,
    short similarity,
    int rCount,
    java.nio.ByteBuffer feature,
    String requestId)
  {
    this();
    this.libraryIds = libraryIds;
    this.similarity = similarity;
    setSimilarityIsSet(true);
    this.rCount = rCount;
    setRCountIsSet(true);
    this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
    this.requestId = requestId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRequest(QueryRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLibraryIds()) {
      java.util.List<String> __this__libraryIds = new java.util.ArrayList<String>(other.libraryIds);
      this.libraryIds = __this__libraryIds;
    }
    this.similarity = other.similarity;
    this.rCount = other.rCount;
    if (other.isSetFeature()) {
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(other.feature);
    }
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
  }

  public QueryRequest deepCopy() {
    return new QueryRequest(this);
  }

  @Override
  public void clear() {
    this.libraryIds = null;
    setSimilarityIsSet(false);
    this.similarity = 0;
    setRCountIsSet(false);
    this.rCount = 0;
    this.feature = null;
    this.requestId = null;
  }

  public int getLibraryIdsSize() {
    return (this.libraryIds == null) ? 0 : this.libraryIds.size();
  }

  public java.util.Iterator<String> getLibraryIdsIterator() {
    return (this.libraryIds == null) ? null : this.libraryIds.iterator();
  }

  public void addToLibraryIds(String elem) {
    if (this.libraryIds == null) {
      this.libraryIds = new java.util.ArrayList<String>();
    }
    this.libraryIds.add(elem);
  }

  public java.util.List<String> getLibraryIds() {
    return this.libraryIds;
  }

  public QueryRequest setLibraryIds(java.util.List<String> libraryIds) {
    this.libraryIds = libraryIds;
    return this;
  }

  public void unsetLibraryIds() {
    this.libraryIds = null;
  }

  /** Returns true if field libraryIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryIds() {
    return this.libraryIds != null;
  }

  public void setLibraryIdsIsSet(boolean value) {
    if (!value) {
      this.libraryIds = null;
    }
  }

  public short getSimilarity() {
    return this.similarity;
  }

  public QueryRequest setSimilarity(short similarity) {
    this.similarity = similarity;
    setSimilarityIsSet(true);
    return this;
  }

  public void unsetSimilarity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIMILARITY_ISSET_ID);
  }

  /** Returns true if field similarity is set (has been assigned a value) and false otherwise */
  public boolean isSetSimilarity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIMILARITY_ISSET_ID);
  }

  public void setSimilarityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIMILARITY_ISSET_ID, value);
  }

  public int getRCount() {
    return this.rCount;
  }

  public QueryRequest setRCount(int rCount) {
    this.rCount = rCount;
    setRCountIsSet(true);
    return this;
  }

  public void unsetRCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RCOUNT_ISSET_ID);
  }

  /** Returns true if field rCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RCOUNT_ISSET_ID);
  }

  public void setRCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RCOUNT_ISSET_ID, value);
  }

  public byte[] getFeature() {
    setFeature(org.apache.thrift.TBaseHelper.rightSize(feature));
    return feature == null ? null : feature.array();
  }

  public java.nio.ByteBuffer bufferForFeature() {
    return org.apache.thrift.TBaseHelper.copyBinary(feature);
  }

  public QueryRequest setFeature(byte[] feature) {
    this.feature = feature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature.clone());
    return this;
  }

  public QueryRequest setFeature(java.nio.ByteBuffer feature) {
    this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public String getRequestId() {
    return this.requestId;
  }

  public QueryRequest setRequestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIBRARY_IDS:
      if (value == null) {
        unsetLibraryIds();
      } else {
        setLibraryIds((java.util.List<String>)value);
      }
      break;

    case SIMILARITY:
      if (value == null) {
        unsetSimilarity();
      } else {
        setSimilarity((Short)value);
      }
      break;

    case R_COUNT:
      if (value == null) {
        unsetRCount();
      } else {
        setRCount((Integer)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        if (value instanceof byte[]) {
          setFeature((byte[])value);
        } else {
          setFeature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIBRARY_IDS:
      return getLibraryIds();

    case SIMILARITY:
      return getSimilarity();

    case R_COUNT:
      return getRCount();

    case FEATURE:
      return getFeature();

    case REQUEST_ID:
      return getRequestId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIBRARY_IDS:
      return isSetLibraryIds();
    case SIMILARITY:
      return isSetSimilarity();
    case R_COUNT:
      return isSetRCount();
    case FEATURE:
      return isSetFeature();
    case REQUEST_ID:
      return isSetRequestId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRequest)
      return this.equals((QueryRequest)that);
    return false;
  }

  public boolean equals(QueryRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_libraryIds = true && this.isSetLibraryIds();
    boolean that_present_libraryIds = true && that.isSetLibraryIds();
    if (this_present_libraryIds || that_present_libraryIds) {
      if (!(this_present_libraryIds && that_present_libraryIds))
        return false;
      if (!this.libraryIds.equals(that.libraryIds))
        return false;
    }

    boolean this_present_similarity = true;
    boolean that_present_similarity = true;
    if (this_present_similarity || that_present_similarity) {
      if (!(this_present_similarity && that_present_similarity))
        return false;
      if (this.similarity != that.similarity)
        return false;
    }

    boolean this_present_rCount = true;
    boolean that_present_rCount = true;
    if (this_present_rCount || that_present_rCount) {
      if (!(this_present_rCount && that_present_rCount))
        return false;
      if (this.rCount != that.rCount)
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLibraryIds()) ? 131071 : 524287);
    if (isSetLibraryIds())
      hashCode = hashCode * 8191 + libraryIds.hashCode();

    hashCode = hashCode * 8191 + similarity;

    hashCode = hashCode * 8191 + rCount;

    hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
    if (isSetFeature())
      hashCode = hashCode * 8191 + feature.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestId()) ? 131071 : 524287);
    if (isSetRequestId())
      hashCode = hashCode * 8191 + requestId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QueryRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLibraryIds()).compareTo(other.isSetLibraryIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryIds, other.libraryIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimilarity()).compareTo(other.isSetSimilarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimilarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.similarity, other.similarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRCount()).compareTo(other.isSetRCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rCount, other.rCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryRequest(");
    boolean first = true;

    sb.append("libraryIds:");
    if (this.libraryIds == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("similarity:");
    sb.append(this.similarity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rCount:");
    sb.append(this.rCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature:");
    if (this.feature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.feature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryRequestStandardScheme getScheme() {
      return new QueryRequestStandardScheme();
    }
  }

  private static class QueryRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIBRARY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.libraryIds = new java.util.ArrayList<String>(_list16.size);
                String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.libraryIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setLibraryIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIMILARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.similarity = iprot.readI16();
              struct.setSimilarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // R_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rCount = iprot.readI32();
              struct.setRCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature = iprot.readBinary();
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.libraryIds != null) {
        oprot.writeFieldBegin(LIBRARY_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.libraryIds.size()));
          for (String _iter19 : struct.libraryIds)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIMILARITY_FIELD_DESC);
      oprot.writeI16(struct.similarity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(R_COUNT_FIELD_DESC);
      oprot.writeI32(struct.rCount);
      oprot.writeFieldEnd();
      if (struct.feature != null) {
        oprot.writeFieldBegin(FEATURE_FIELD_DESC);
        oprot.writeBinary(struct.feature);
        oprot.writeFieldEnd();
      }
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryRequestTupleScheme getScheme() {
      return new QueryRequestTupleScheme();
    }
  }

  private static class QueryRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLibraryIds()) {
        optionals.set(0);
      }
      if (struct.isSetSimilarity()) {
        optionals.set(1);
      }
      if (struct.isSetRCount()) {
        optionals.set(2);
      }
      if (struct.isSetFeature()) {
        optionals.set(3);
      }
      if (struct.isSetRequestId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLibraryIds()) {
        {
          oprot.writeI32(struct.libraryIds.size());
          for (String _iter20 : struct.libraryIds)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetSimilarity()) {
        oprot.writeI16(struct.similarity);
      }
      if (struct.isSetRCount()) {
        oprot.writeI32(struct.rCount);
      }
      if (struct.isSetFeature()) {
        oprot.writeBinary(struct.feature);
      }
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.libraryIds = new java.util.ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.libraryIds.add(_elem22);
          }
        }
        struct.setLibraryIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.similarity = iprot.readI16();
        struct.setSimilarityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rCount = iprot.readI32();
        struct.setRCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.feature = iprot.readBinary();
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

