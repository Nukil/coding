/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package netposa.firstincity.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-30")
public class InputRecord implements org.apache.thrift.TBase<InputRecord, InputRecord._Fields>, java.io.Serializable, Cloneable, Comparable<InputRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InputRecord");

  private static final org.apache.thrift.protocol.TField LICENCE_PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("licence_plate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LICENCE_PLATE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("licence_plate_color", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pass_time", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InputRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InputRecordTupleSchemeFactory());
  }

  public ByteBuffer licence_plate; // required
  public ByteBuffer licence_plate_color; // required
  public ByteBuffer pass_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LICENCE_PLATE((short)1, "licence_plate"),
    LICENCE_PLATE_COLOR((short)2, "licence_plate_color"),
    PASS_TIME((short)3, "pass_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LICENCE_PLATE
          return LICENCE_PLATE;
        case 2: // LICENCE_PLATE_COLOR
          return LICENCE_PLATE_COLOR;
        case 3: // PASS_TIME
          return PASS_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LICENCE_PLATE, new org.apache.thrift.meta_data.FieldMetaData("licence_plate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LICENCE_PLATE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("licence_plate_color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PASS_TIME, new org.apache.thrift.meta_data.FieldMetaData("pass_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InputRecord.class, metaDataMap);
  }

  public InputRecord() {
  }

  public InputRecord(
    ByteBuffer licence_plate,
    ByteBuffer licence_plate_color,
    ByteBuffer pass_time)
  {
    this();
    this.licence_plate = org.apache.thrift.TBaseHelper.copyBinary(licence_plate);
    this.licence_plate_color = org.apache.thrift.TBaseHelper.copyBinary(licence_plate_color);
    this.pass_time = org.apache.thrift.TBaseHelper.copyBinary(pass_time);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InputRecord(InputRecord other) {
    if (other.isSetLicence_plate()) {
      this.licence_plate = org.apache.thrift.TBaseHelper.copyBinary(other.licence_plate);
    }
    if (other.isSetLicence_plate_color()) {
      this.licence_plate_color = org.apache.thrift.TBaseHelper.copyBinary(other.licence_plate_color);
    }
    if (other.isSetPass_time()) {
      this.pass_time = org.apache.thrift.TBaseHelper.copyBinary(other.pass_time);
    }
  }

  public InputRecord deepCopy() {
    return new InputRecord(this);
  }

  @Override
  public void clear() {
    this.licence_plate = null;
    this.licence_plate_color = null;
    this.pass_time = null;
  }

  public byte[] getLicence_plate() {
    setLicence_plate(org.apache.thrift.TBaseHelper.rightSize(licence_plate));
    return licence_plate == null ? null : licence_plate.array();
  }

  public ByteBuffer bufferForLicence_plate() {
    return org.apache.thrift.TBaseHelper.copyBinary(licence_plate);
  }

  public InputRecord setLicence_plate(byte[] licence_plate) {
    this.licence_plate = licence_plate == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(licence_plate, licence_plate.length));
    return this;
  }

  public InputRecord setLicence_plate(ByteBuffer licence_plate) {
    this.licence_plate = org.apache.thrift.TBaseHelper.copyBinary(licence_plate);
    return this;
  }

  public void unsetLicence_plate() {
    this.licence_plate = null;
  }

  /** Returns true if field licence_plate is set (has been assigned a value) and false otherwise */
  public boolean isSetLicence_plate() {
    return this.licence_plate != null;
  }

  public void setLicence_plateIsSet(boolean value) {
    if (!value) {
      this.licence_plate = null;
    }
  }

  public byte[] getLicence_plate_color() {
    setLicence_plate_color(org.apache.thrift.TBaseHelper.rightSize(licence_plate_color));
    return licence_plate_color == null ? null : licence_plate_color.array();
  }

  public ByteBuffer bufferForLicence_plate_color() {
    return org.apache.thrift.TBaseHelper.copyBinary(licence_plate_color);
  }

  public InputRecord setLicence_plate_color(byte[] licence_plate_color) {
    this.licence_plate_color = licence_plate_color == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(licence_plate_color, licence_plate_color.length));
    return this;
  }

  public InputRecord setLicence_plate_color(ByteBuffer licence_plate_color) {
    this.licence_plate_color = org.apache.thrift.TBaseHelper.copyBinary(licence_plate_color);
    return this;
  }

  public void unsetLicence_plate_color() {
    this.licence_plate_color = null;
  }

  /** Returns true if field licence_plate_color is set (has been assigned a value) and false otherwise */
  public boolean isSetLicence_plate_color() {
    return this.licence_plate_color != null;
  }

  public void setLicence_plate_colorIsSet(boolean value) {
    if (!value) {
      this.licence_plate_color = null;
    }
  }

  public byte[] getPass_time() {
    setPass_time(org.apache.thrift.TBaseHelper.rightSize(pass_time));
    return pass_time == null ? null : pass_time.array();
  }

  public ByteBuffer bufferForPass_time() {
    return org.apache.thrift.TBaseHelper.copyBinary(pass_time);
  }

  public InputRecord setPass_time(byte[] pass_time) {
    this.pass_time = pass_time == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(pass_time, pass_time.length));
    return this;
  }

  public InputRecord setPass_time(ByteBuffer pass_time) {
    this.pass_time = org.apache.thrift.TBaseHelper.copyBinary(pass_time);
    return this;
  }

  public void unsetPass_time() {
    this.pass_time = null;
  }

  /** Returns true if field pass_time is set (has been assigned a value) and false otherwise */
  public boolean isSetPass_time() {
    return this.pass_time != null;
  }

  public void setPass_timeIsSet(boolean value) {
    if (!value) {
      this.pass_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LICENCE_PLATE:
      if (value == null) {
        unsetLicence_plate();
      } else {
        setLicence_plate((ByteBuffer)value);
      }
      break;

    case LICENCE_PLATE_COLOR:
      if (value == null) {
        unsetLicence_plate_color();
      } else {
        setLicence_plate_color((ByteBuffer)value);
      }
      break;

    case PASS_TIME:
      if (value == null) {
        unsetPass_time();
      } else {
        setPass_time((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LICENCE_PLATE:
      return getLicence_plate();

    case LICENCE_PLATE_COLOR:
      return getLicence_plate_color();

    case PASS_TIME:
      return getPass_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LICENCE_PLATE:
      return isSetLicence_plate();
    case LICENCE_PLATE_COLOR:
      return isSetLicence_plate_color();
    case PASS_TIME:
      return isSetPass_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InputRecord)
      return this.equals((InputRecord)that);
    return false;
  }

  public boolean equals(InputRecord that) {
    if (that == null)
      return false;

    boolean this_present_licence_plate = true && this.isSetLicence_plate();
    boolean that_present_licence_plate = true && that.isSetLicence_plate();
    if (this_present_licence_plate || that_present_licence_plate) {
      if (!(this_present_licence_plate && that_present_licence_plate))
        return false;
      if (!this.licence_plate.equals(that.licence_plate))
        return false;
    }

    boolean this_present_licence_plate_color = true && this.isSetLicence_plate_color();
    boolean that_present_licence_plate_color = true && that.isSetLicence_plate_color();
    if (this_present_licence_plate_color || that_present_licence_plate_color) {
      if (!(this_present_licence_plate_color && that_present_licence_plate_color))
        return false;
      if (!this.licence_plate_color.equals(that.licence_plate_color))
        return false;
    }

    boolean this_present_pass_time = true && this.isSetPass_time();
    boolean that_present_pass_time = true && that.isSetPass_time();
    if (this_present_pass_time || that_present_pass_time) {
      if (!(this_present_pass_time && that_present_pass_time))
        return false;
      if (!this.pass_time.equals(that.pass_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_licence_plate = true && (isSetLicence_plate());
    list.add(present_licence_plate);
    if (present_licence_plate)
      list.add(licence_plate);

    boolean present_licence_plate_color = true && (isSetLicence_plate_color());
    list.add(present_licence_plate_color);
    if (present_licence_plate_color)
      list.add(licence_plate_color);

    boolean present_pass_time = true && (isSetPass_time());
    list.add(present_pass_time);
    if (present_pass_time)
      list.add(pass_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(InputRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLicence_plate()).compareTo(other.isSetLicence_plate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicence_plate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licence_plate, other.licence_plate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLicence_plate_color()).compareTo(other.isSetLicence_plate_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicence_plate_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licence_plate_color, other.licence_plate_color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPass_time()).compareTo(other.isSetPass_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPass_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pass_time, other.pass_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InputRecord(");
    boolean first = true;

    sb.append("licence_plate:");
    if (this.licence_plate == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.licence_plate, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("licence_plate_color:");
    if (this.licence_plate_color == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.licence_plate_color, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pass_time:");
    if (this.pass_time == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.pass_time, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InputRecordStandardSchemeFactory implements SchemeFactory {
    public InputRecordStandardScheme getScheme() {
      return new InputRecordStandardScheme();
    }
  }

  private static class InputRecordStandardScheme extends StandardScheme<InputRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InputRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LICENCE_PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.licence_plate = iprot.readBinary();
              struct.setLicence_plateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LICENCE_PLATE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.licence_plate_color = iprot.readBinary();
              struct.setLicence_plate_colorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pass_time = iprot.readBinary();
              struct.setPass_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InputRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.licence_plate != null) {
        oprot.writeFieldBegin(LICENCE_PLATE_FIELD_DESC);
        oprot.writeBinary(struct.licence_plate);
        oprot.writeFieldEnd();
      }
      if (struct.licence_plate_color != null) {
        oprot.writeFieldBegin(LICENCE_PLATE_COLOR_FIELD_DESC);
        oprot.writeBinary(struct.licence_plate_color);
        oprot.writeFieldEnd();
      }
      if (struct.pass_time != null) {
        oprot.writeFieldBegin(PASS_TIME_FIELD_DESC);
        oprot.writeBinary(struct.pass_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InputRecordTupleSchemeFactory implements SchemeFactory {
    public InputRecordTupleScheme getScheme() {
      return new InputRecordTupleScheme();
    }
  }

  private static class InputRecordTupleScheme extends TupleScheme<InputRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InputRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLicence_plate()) {
        optionals.set(0);
      }
      if (struct.isSetLicence_plate_color()) {
        optionals.set(1);
      }
      if (struct.isSetPass_time()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLicence_plate()) {
        oprot.writeBinary(struct.licence_plate);
      }
      if (struct.isSetLicence_plate_color()) {
        oprot.writeBinary(struct.licence_plate_color);
      }
      if (struct.isSetPass_time()) {
        oprot.writeBinary(struct.pass_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InputRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.licence_plate = iprot.readBinary();
        struct.setLicence_plateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.licence_plate_color = iprot.readBinary();
        struct.setLicence_plate_colorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pass_time = iprot.readBinary();
        struct.setPass_timeIsSet(true);
      }
    }
  }

}

