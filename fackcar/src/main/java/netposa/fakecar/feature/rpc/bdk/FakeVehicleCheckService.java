/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package netposa.fakecar.feature.rpc.bdk;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-13")
public class FakeVehicleCheckService {

  public interface Iface {

    public String checkFakeVehicle(String taskContent, String businessName, String priorityStr) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkFakeVehicle(String taskContent, String businessName, String priorityStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String checkFakeVehicle(String taskContent, String businessName, String priorityStr) throws org.apache.thrift.TException
    {
      send_checkFakeVehicle(taskContent, businessName, priorityStr);
      return recv_checkFakeVehicle();
    }

    public void send_checkFakeVehicle(String taskContent, String businessName, String priorityStr) throws org.apache.thrift.TException
    {
      checkFakeVehicle_args args = new checkFakeVehicle_args();
      args.setTaskContent(taskContent);
      args.setBusinessName(businessName);
      args.setPriorityStr(priorityStr);
      sendBase("checkFakeVehicle", args);
    }

    public String recv_checkFakeVehicle() throws org.apache.thrift.TException
    {
      checkFakeVehicle_result result = new checkFakeVehicle_result();
      receiveBase(result, "checkFakeVehicle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkFakeVehicle failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkFakeVehicle(String taskContent, String businessName, String priorityStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkFakeVehicle_call method_call = new checkFakeVehicle_call(taskContent, businessName, priorityStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkFakeVehicle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taskContent;
      private String businessName;
      private String priorityStr;
      public checkFakeVehicle_call(String taskContent, String businessName, String priorityStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskContent = taskContent;
        this.businessName = businessName;
        this.priorityStr = priorityStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkFakeVehicle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkFakeVehicle_args args = new checkFakeVehicle_args();
        args.setTaskContent(taskContent);
        args.setBusinessName(businessName);
        args.setPriorityStr(priorityStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkFakeVehicle();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkFakeVehicle", new checkFakeVehicle());
      return processMap;
    }

    public static class checkFakeVehicle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkFakeVehicle_args> {
      public checkFakeVehicle() {
        super("checkFakeVehicle");
      }

      public checkFakeVehicle_args getEmptyArgsInstance() {
        return new checkFakeVehicle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkFakeVehicle_result getResult(I iface, checkFakeVehicle_args args) throws org.apache.thrift.TException {
        checkFakeVehicle_result result = new checkFakeVehicle_result();
        result.success = iface.checkFakeVehicle(args.taskContent, args.businessName, args.priorityStr);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkFakeVehicle", new checkFakeVehicle());
      return processMap;
    }

    public static class checkFakeVehicle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkFakeVehicle_args, String> {
      public checkFakeVehicle() {
        super("checkFakeVehicle");
      }

      public checkFakeVehicle_args getEmptyArgsInstance() {
        return new checkFakeVehicle_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            checkFakeVehicle_result result = new checkFakeVehicle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkFakeVehicle_result result = new checkFakeVehicle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkFakeVehicle_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.checkFakeVehicle(args.taskContent, args.businessName, args.priorityStr,resultHandler);
      }
    }

  }

  public static class checkFakeVehicle_args implements org.apache.thrift.TBase<checkFakeVehicle_args, checkFakeVehicle_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkFakeVehicle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFakeVehicle_args");

    private static final org.apache.thrift.protocol.TField TASK_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("taskContent", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUSINESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PRIORITY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityStr", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFakeVehicle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFakeVehicle_argsTupleSchemeFactory());
    }

    public String taskContent; // required
    public String businessName; // required
    public String priorityStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_CONTENT((short)1, "taskContent"),
      BUSINESS_NAME((short)2, "businessName"),
      PRIORITY_STR((short)3, "priorityStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_CONTENT
            return TASK_CONTENT;
          case 2: // BUSINESS_NAME
            return BUSINESS_NAME;
          case 3: // PRIORITY_STR
            return PRIORITY_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("taskContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSINESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_STR, new org.apache.thrift.meta_data.FieldMetaData("priorityStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFakeVehicle_args.class, metaDataMap);
    }

    public checkFakeVehicle_args() {
    }

    public checkFakeVehicle_args(
      String taskContent,
      String businessName,
      String priorityStr)
    {
      this();
      this.taskContent = taskContent;
      this.businessName = businessName;
      this.priorityStr = priorityStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFakeVehicle_args(checkFakeVehicle_args other) {
      if (other.isSetTaskContent()) {
        this.taskContent = other.taskContent;
      }
      if (other.isSetBusinessName()) {
        this.businessName = other.businessName;
      }
      if (other.isSetPriorityStr()) {
        this.priorityStr = other.priorityStr;
      }
    }

    public checkFakeVehicle_args deepCopy() {
      return new checkFakeVehicle_args(this);
    }

    @Override
    public void clear() {
      this.taskContent = null;
      this.businessName = null;
      this.priorityStr = null;
    }

    public String getTaskContent() {
      return this.taskContent;
    }

    public checkFakeVehicle_args setTaskContent(String taskContent) {
      this.taskContent = taskContent;
      return this;
    }

    public void unsetTaskContent() {
      this.taskContent = null;
    }

    /** Returns true if field taskContent is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskContent() {
      return this.taskContent != null;
    }

    public void setTaskContentIsSet(boolean value) {
      if (!value) {
        this.taskContent = null;
      }
    }

    public String getBusinessName() {
      return this.businessName;
    }

    public checkFakeVehicle_args setBusinessName(String businessName) {
      this.businessName = businessName;
      return this;
    }

    public void unsetBusinessName() {
      this.businessName = null;
    }

    /** Returns true if field businessName is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessName() {
      return this.businessName != null;
    }

    public void setBusinessNameIsSet(boolean value) {
      if (!value) {
        this.businessName = null;
      }
    }

    public String getPriorityStr() {
      return this.priorityStr;
    }

    public checkFakeVehicle_args setPriorityStr(String priorityStr) {
      this.priorityStr = priorityStr;
      return this;
    }

    public void unsetPriorityStr() {
      this.priorityStr = null;
    }

    /** Returns true if field priorityStr is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityStr() {
      return this.priorityStr != null;
    }

    public void setPriorityStrIsSet(boolean value) {
      if (!value) {
        this.priorityStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_CONTENT:
        if (value == null) {
          unsetTaskContent();
        } else {
          setTaskContent((String)value);
        }
        break;

      case BUSINESS_NAME:
        if (value == null) {
          unsetBusinessName();
        } else {
          setBusinessName((String)value);
        }
        break;

      case PRIORITY_STR:
        if (value == null) {
          unsetPriorityStr();
        } else {
          setPriorityStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_CONTENT:
        return getTaskContent();

      case BUSINESS_NAME:
        return getBusinessName();

      case PRIORITY_STR:
        return getPriorityStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_CONTENT:
        return isSetTaskContent();
      case BUSINESS_NAME:
        return isSetBusinessName();
      case PRIORITY_STR:
        return isSetPriorityStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFakeVehicle_args)
        return this.equals((checkFakeVehicle_args)that);
      return false;
    }

    public boolean equals(checkFakeVehicle_args that) {
      if (that == null)
        return false;

      boolean this_present_taskContent = true && this.isSetTaskContent();
      boolean that_present_taskContent = true && that.isSetTaskContent();
      if (this_present_taskContent || that_present_taskContent) {
        if (!(this_present_taskContent && that_present_taskContent))
          return false;
        if (!this.taskContent.equals(that.taskContent))
          return false;
      }

      boolean this_present_businessName = true && this.isSetBusinessName();
      boolean that_present_businessName = true && that.isSetBusinessName();
      if (this_present_businessName || that_present_businessName) {
        if (!(this_present_businessName && that_present_businessName))
          return false;
        if (!this.businessName.equals(that.businessName))
          return false;
      }

      boolean this_present_priorityStr = true && this.isSetPriorityStr();
      boolean that_present_priorityStr = true && that.isSetPriorityStr();
      if (this_present_priorityStr || that_present_priorityStr) {
        if (!(this_present_priorityStr && that_present_priorityStr))
          return false;
        if (!this.priorityStr.equals(that.priorityStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskContent = true && (isSetTaskContent());
      list.add(present_taskContent);
      if (present_taskContent)
        list.add(taskContent);

      boolean present_businessName = true && (isSetBusinessName());
      list.add(present_businessName);
      if (present_businessName)
        list.add(businessName);

      boolean present_priorityStr = true && (isSetPriorityStr());
      list.add(present_priorityStr);
      if (present_priorityStr)
        list.add(priorityStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkFakeVehicle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskContent()).compareTo(other.isSetTaskContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskContent, other.taskContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessName()).compareTo(other.isSetBusinessName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessName, other.businessName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityStr()).compareTo(other.isSetPriorityStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityStr, other.priorityStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFakeVehicle_args(");
      boolean first = true;

      sb.append("taskContent:");
      if (this.taskContent == null) {
        sb.append("null");
      } else {
        sb.append(this.taskContent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessName:");
      if (this.businessName == null) {
        sb.append("null");
      } else {
        sb.append(this.businessName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityStr:");
      if (this.priorityStr == null) {
        sb.append("null");
      } else {
        sb.append(this.priorityStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFakeVehicle_argsStandardSchemeFactory implements SchemeFactory {
      public checkFakeVehicle_argsStandardScheme getScheme() {
        return new checkFakeVehicle_argsStandardScheme();
      }
    }

    private static class checkFakeVehicle_argsStandardScheme extends StandardScheme<checkFakeVehicle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFakeVehicle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskContent = iprot.readString();
                struct.setTaskContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUSINESS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessName = iprot.readString();
                struct.setBusinessNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRIORITY_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.priorityStr = iprot.readString();
                struct.setPriorityStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFakeVehicle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskContent != null) {
          oprot.writeFieldBegin(TASK_CONTENT_FIELD_DESC);
          oprot.writeString(struct.taskContent);
          oprot.writeFieldEnd();
        }
        if (struct.businessName != null) {
          oprot.writeFieldBegin(BUSINESS_NAME_FIELD_DESC);
          oprot.writeString(struct.businessName);
          oprot.writeFieldEnd();
        }
        if (struct.priorityStr != null) {
          oprot.writeFieldBegin(PRIORITY_STR_FIELD_DESC);
          oprot.writeString(struct.priorityStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFakeVehicle_argsTupleSchemeFactory implements SchemeFactory {
      public checkFakeVehicle_argsTupleScheme getScheme() {
        return new checkFakeVehicle_argsTupleScheme();
      }
    }

    private static class checkFakeVehicle_argsTupleScheme extends TupleScheme<checkFakeVehicle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFakeVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskContent()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessName()) {
          optionals.set(1);
        }
        if (struct.isSetPriorityStr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskContent()) {
          oprot.writeString(struct.taskContent);
        }
        if (struct.isSetBusinessName()) {
          oprot.writeString(struct.businessName);
        }
        if (struct.isSetPriorityStr()) {
          oprot.writeString(struct.priorityStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFakeVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskContent = iprot.readString();
          struct.setTaskContentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessName = iprot.readString();
          struct.setBusinessNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.priorityStr = iprot.readString();
          struct.setPriorityStrIsSet(true);
        }
      }
    }

  }

  public static class checkFakeVehicle_result implements org.apache.thrift.TBase<checkFakeVehicle_result, checkFakeVehicle_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkFakeVehicle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFakeVehicle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFakeVehicle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFakeVehicle_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFakeVehicle_result.class, metaDataMap);
    }

    public checkFakeVehicle_result() {
    }

    public checkFakeVehicle_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFakeVehicle_result(checkFakeVehicle_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkFakeVehicle_result deepCopy() {
      return new checkFakeVehicle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checkFakeVehicle_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFakeVehicle_result)
        return this.equals((checkFakeVehicle_result)that);
      return false;
    }

    public boolean equals(checkFakeVehicle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkFakeVehicle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFakeVehicle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFakeVehicle_resultStandardSchemeFactory implements SchemeFactory {
      public checkFakeVehicle_resultStandardScheme getScheme() {
        return new checkFakeVehicle_resultStandardScheme();
      }
    }

    private static class checkFakeVehicle_resultStandardScheme extends StandardScheme<checkFakeVehicle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFakeVehicle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFakeVehicle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFakeVehicle_resultTupleSchemeFactory implements SchemeFactory {
      public checkFakeVehicle_resultTupleScheme getScheme() {
        return new checkFakeVehicle_resultTupleScheme();
      }
    }

    private static class checkFakeVehicle_resultTupleScheme extends TupleScheme<checkFakeVehicle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFakeVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFakeVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
