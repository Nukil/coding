/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package netposa.fakecar.feature.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InputRecordBuffer implements org.apache.thrift.TBase<InputRecordBuffer, InputRecordBuffer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InputRecordBuffer");

  private static final org.apache.thrift.protocol.TField LICENCE_PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("licence_plate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LICENCE_PLATE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("licence_plate_color", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VEHICLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VEHICLE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_color", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VEHICLE_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_logo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VEHICLE_CHILD_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_child_logo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VEHICLE_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_style", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("record_id", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VEHICLE_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_feature", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("source_type", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence_level", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PLATE_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("plate_confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField LOGO_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("logo_confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField VEHICLE_LEFT_X_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_left_x", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField VEHICLE_LEFT_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_left_y", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField VEHICLE_RIGTH_X_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_rigth_x", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VEHICLE_RIGTH_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle_rigth_y", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField OLD_LICENCE_PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("old_licence_plate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TRAFFIC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("traffic_time", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HEAD_REAR_FIELD_DESC = new org.apache.thrift.protocol.TField("head_rear", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TRAFFIC_KKBH_FIELD_DESC = new org.apache.thrift.protocol.TField("traffic_kkbh", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TRAFFIC_XZQH_FIELD_DESC = new org.apache.thrift.protocol.TField("traffic_xzqh", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InputRecordBufferStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InputRecordBufferTupleSchemeFactory());
  }

  public ByteBuffer licence_plate; // required
  public ByteBuffer licence_plate_color; // required
  public ByteBuffer vehicle_type; // required
  public ByteBuffer vehicle_color; // required
  public ByteBuffer vehicle_logo; // required
  public ByteBuffer vehicle_child_logo; // required
  public ByteBuffer vehicle_style; // required
  public ByteBuffer record_id; // required
  public ByteBuffer vehicle_feature; // required
  public byte source_type; // required
  public double confidence_level; // required
  public double plate_confidence; // required
  public double logo_confidence; // required
  public int vehicle_left_x; // required
  public int vehicle_left_y; // required
  public int vehicle_rigth_x; // required
  public int vehicle_rigth_y; // required
  public ByteBuffer old_licence_plate; // required
  public ByteBuffer traffic_time; // required
  public int head_rear; // required
  public ByteBuffer traffic_kkbh; // required
  public ByteBuffer traffic_xzqh; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LICENCE_PLATE((short)1, "licence_plate"),
    LICENCE_PLATE_COLOR((short)2, "licence_plate_color"),
    VEHICLE_TYPE((short)3, "vehicle_type"),
    VEHICLE_COLOR((short)4, "vehicle_color"),
    VEHICLE_LOGO((short)5, "vehicle_logo"),
    VEHICLE_CHILD_LOGO((short)6, "vehicle_child_logo"),
    VEHICLE_STYLE((short)7, "vehicle_style"),
    RECORD_ID((short)8, "record_id"),
    VEHICLE_FEATURE((short)9, "vehicle_feature"),
    SOURCE_TYPE((short)10, "source_type"),
    CONFIDENCE_LEVEL((short)11, "confidence_level"),
    PLATE_CONFIDENCE((short)12, "plate_confidence"),
    LOGO_CONFIDENCE((short)13, "logo_confidence"),
    VEHICLE_LEFT_X((short)14, "vehicle_left_x"),
    VEHICLE_LEFT_Y((short)15, "vehicle_left_y"),
    VEHICLE_RIGTH_X((short)16, "vehicle_rigth_x"),
    VEHICLE_RIGTH_Y((short)17, "vehicle_rigth_y"),
    OLD_LICENCE_PLATE((short)18, "old_licence_plate"),
    TRAFFIC_TIME((short)19, "traffic_time"),
    HEAD_REAR((short)20, "head_rear"),
    TRAFFIC_KKBH((short)21, "traffic_kkbh"),
    TRAFFIC_XZQH((short)22, "traffic_xzqh");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LICENCE_PLATE
          return LICENCE_PLATE;
        case 2: // LICENCE_PLATE_COLOR
          return LICENCE_PLATE_COLOR;
        case 3: // VEHICLE_TYPE
          return VEHICLE_TYPE;
        case 4: // VEHICLE_COLOR
          return VEHICLE_COLOR;
        case 5: // VEHICLE_LOGO
          return VEHICLE_LOGO;
        case 6: // VEHICLE_CHILD_LOGO
          return VEHICLE_CHILD_LOGO;
        case 7: // VEHICLE_STYLE
          return VEHICLE_STYLE;
        case 8: // RECORD_ID
          return RECORD_ID;
        case 9: // VEHICLE_FEATURE
          return VEHICLE_FEATURE;
        case 10: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 11: // CONFIDENCE_LEVEL
          return CONFIDENCE_LEVEL;
        case 12: // PLATE_CONFIDENCE
          return PLATE_CONFIDENCE;
        case 13: // LOGO_CONFIDENCE
          return LOGO_CONFIDENCE;
        case 14: // VEHICLE_LEFT_X
          return VEHICLE_LEFT_X;
        case 15: // VEHICLE_LEFT_Y
          return VEHICLE_LEFT_Y;
        case 16: // VEHICLE_RIGTH_X
          return VEHICLE_RIGTH_X;
        case 17: // VEHICLE_RIGTH_Y
          return VEHICLE_RIGTH_Y;
        case 18: // OLD_LICENCE_PLATE
          return OLD_LICENCE_PLATE;
        case 19: // TRAFFIC_TIME
          return TRAFFIC_TIME;
        case 20: // HEAD_REAR
          return HEAD_REAR;
        case 21: // TRAFFIC_KKBH
          return TRAFFIC_KKBH;
        case 22: // TRAFFIC_XZQH
          return TRAFFIC_XZQH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOURCE_TYPE_ISSET_ID = 0;
  private static final int __CONFIDENCE_LEVEL_ISSET_ID = 1;
  private static final int __PLATE_CONFIDENCE_ISSET_ID = 2;
  private static final int __LOGO_CONFIDENCE_ISSET_ID = 3;
  private static final int __VEHICLE_LEFT_X_ISSET_ID = 4;
  private static final int __VEHICLE_LEFT_Y_ISSET_ID = 5;
  private static final int __VEHICLE_RIGTH_X_ISSET_ID = 6;
  private static final int __VEHICLE_RIGTH_Y_ISSET_ID = 7;
  private static final int __HEAD_REAR_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LICENCE_PLATE, new org.apache.thrift.meta_data.FieldMetaData("licence_plate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LICENCE_PLATE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("licence_plate_color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vehicle_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("vehicle_color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_LOGO, new org.apache.thrift.meta_data.FieldMetaData("vehicle_logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_CHILD_LOGO, new org.apache.thrift.meta_data.FieldMetaData("vehicle_child_logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_STYLE, new org.apache.thrift.meta_data.FieldMetaData("vehicle_style", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("record_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VEHICLE_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("vehicle_feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("source_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONFIDENCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("confidence_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLATE_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("plate_confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOGO_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("logo_confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VEHICLE_LEFT_X, new org.apache.thrift.meta_data.FieldMetaData("vehicle_left_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VEHICLE_LEFT_Y, new org.apache.thrift.meta_data.FieldMetaData("vehicle_left_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VEHICLE_RIGTH_X, new org.apache.thrift.meta_data.FieldMetaData("vehicle_rigth_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VEHICLE_RIGTH_Y, new org.apache.thrift.meta_data.FieldMetaData("vehicle_rigth_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_LICENCE_PLATE, new org.apache.thrift.meta_data.FieldMetaData("old_licence_plate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TRAFFIC_TIME, new org.apache.thrift.meta_data.FieldMetaData("traffic_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HEAD_REAR, new org.apache.thrift.meta_data.FieldMetaData("head_rear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAFFIC_KKBH, new org.apache.thrift.meta_data.FieldMetaData("traffic_kkbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TRAFFIC_XZQH, new org.apache.thrift.meta_data.FieldMetaData("traffic_xzqh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InputRecordBuffer.class, metaDataMap);
  }

  public InputRecordBuffer() {
  }

  public InputRecordBuffer(
    ByteBuffer licence_plate,
    ByteBuffer licence_plate_color,
    ByteBuffer vehicle_type,
    ByteBuffer vehicle_color,
    ByteBuffer vehicle_logo,
    ByteBuffer vehicle_child_logo,
    ByteBuffer vehicle_style,
    ByteBuffer record_id,
    ByteBuffer vehicle_feature,
    byte source_type,
    double confidence_level,
    double plate_confidence,
    double logo_confidence,
    int vehicle_left_x,
    int vehicle_left_y,
    int vehicle_rigth_x,
    int vehicle_rigth_y,
    ByteBuffer old_licence_plate,
    ByteBuffer traffic_time,
    int head_rear,
    ByteBuffer traffic_kkbh,
    ByteBuffer traffic_xzqh)
  {
    this();
    this.licence_plate = licence_plate;
    this.licence_plate_color = licence_plate_color;
    this.vehicle_type = vehicle_type;
    this.vehicle_color = vehicle_color;
    this.vehicle_logo = vehicle_logo;
    this.vehicle_child_logo = vehicle_child_logo;
    this.vehicle_style = vehicle_style;
    this.record_id = record_id;
    this.vehicle_feature = vehicle_feature;
    this.source_type = source_type;
    setSource_typeIsSet(true);
    this.confidence_level = confidence_level;
    setConfidence_levelIsSet(true);
    this.plate_confidence = plate_confidence;
    setPlate_confidenceIsSet(true);
    this.logo_confidence = logo_confidence;
    setLogo_confidenceIsSet(true);
    this.vehicle_left_x = vehicle_left_x;
    setVehicle_left_xIsSet(true);
    this.vehicle_left_y = vehicle_left_y;
    setVehicle_left_yIsSet(true);
    this.vehicle_rigth_x = vehicle_rigth_x;
    setVehicle_rigth_xIsSet(true);
    this.vehicle_rigth_y = vehicle_rigth_y;
    setVehicle_rigth_yIsSet(true);
    this.old_licence_plate = old_licence_plate;
    this.traffic_time = traffic_time;
    this.head_rear = head_rear;
    setHead_rearIsSet(true);
    this.traffic_kkbh = traffic_kkbh;
    this.traffic_xzqh = traffic_xzqh;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InputRecordBuffer(InputRecordBuffer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLicence_plate()) {
      this.licence_plate = org.apache.thrift.TBaseHelper.copyBinary(other.licence_plate);
;
    }
    if (other.isSetLicence_plate_color()) {
      this.licence_plate_color = org.apache.thrift.TBaseHelper.copyBinary(other.licence_plate_color);
;
    }
    if (other.isSetVehicle_type()) {
      this.vehicle_type = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_type);
;
    }
    if (other.isSetVehicle_color()) {
      this.vehicle_color = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_color);
;
    }
    if (other.isSetVehicle_logo()) {
      this.vehicle_logo = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_logo);
;
    }
    if (other.isSetVehicle_child_logo()) {
      this.vehicle_child_logo = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_child_logo);
;
    }
    if (other.isSetVehicle_style()) {
      this.vehicle_style = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_style);
;
    }
    if (other.isSetRecord_id()) {
      this.record_id = org.apache.thrift.TBaseHelper.copyBinary(other.record_id);
;
    }
    if (other.isSetVehicle_feature()) {
      this.vehicle_feature = org.apache.thrift.TBaseHelper.copyBinary(other.vehicle_feature);
;
    }
    this.source_type = other.source_type;
    this.confidence_level = other.confidence_level;
    this.plate_confidence = other.plate_confidence;
    this.logo_confidence = other.logo_confidence;
    this.vehicle_left_x = other.vehicle_left_x;
    this.vehicle_left_y = other.vehicle_left_y;
    this.vehicle_rigth_x = other.vehicle_rigth_x;
    this.vehicle_rigth_y = other.vehicle_rigth_y;
    if (other.isSetOld_licence_plate()) {
      this.old_licence_plate = org.apache.thrift.TBaseHelper.copyBinary(other.old_licence_plate);
;
    }
    if (other.isSetTraffic_time()) {
      this.traffic_time = org.apache.thrift.TBaseHelper.copyBinary(other.traffic_time);
;
    }
    this.head_rear = other.head_rear;
    if (other.isSetTraffic_kkbh()) {
      this.traffic_kkbh = org.apache.thrift.TBaseHelper.copyBinary(other.traffic_kkbh);
;
    }
    if (other.isSetTraffic_xzqh()) {
      this.traffic_xzqh = org.apache.thrift.TBaseHelper.copyBinary(other.traffic_xzqh);
;
    }
  }

  public InputRecordBuffer deepCopy() {
    return new InputRecordBuffer(this);
  }

  @Override
  public void clear() {
    this.licence_plate = null;
    this.licence_plate_color = null;
    this.vehicle_type = null;
    this.vehicle_color = null;
    this.vehicle_logo = null;
    this.vehicle_child_logo = null;
    this.vehicle_style = null;
    this.record_id = null;
    this.vehicle_feature = null;
    setSource_typeIsSet(false);
    this.source_type = 0;
    setConfidence_levelIsSet(false);
    this.confidence_level = 0.0;
    setPlate_confidenceIsSet(false);
    this.plate_confidence = 0.0;
    setLogo_confidenceIsSet(false);
    this.logo_confidence = 0.0;
    setVehicle_left_xIsSet(false);
    this.vehicle_left_x = 0;
    setVehicle_left_yIsSet(false);
    this.vehicle_left_y = 0;
    setVehicle_rigth_xIsSet(false);
    this.vehicle_rigth_x = 0;
    setVehicle_rigth_yIsSet(false);
    this.vehicle_rigth_y = 0;
    this.old_licence_plate = null;
    this.traffic_time = null;
    setHead_rearIsSet(false);
    this.head_rear = 0;
    this.traffic_kkbh = null;
    this.traffic_xzqh = null;
  }

  public byte[] getLicence_plate() {
    setLicence_plate(org.apache.thrift.TBaseHelper.rightSize(licence_plate));
    return licence_plate == null ? null : licence_plate.array();
  }

  public ByteBuffer bufferForLicence_plate() {
    return licence_plate;
  }

  public InputRecordBuffer setLicence_plate(byte[] licence_plate) {
    setLicence_plate(licence_plate == null ? (ByteBuffer)null : ByteBuffer.wrap(licence_plate));
    return this;
  }

  public InputRecordBuffer setLicence_plate(ByteBuffer licence_plate) {
    this.licence_plate = licence_plate;
    return this;
  }

  public void unsetLicence_plate() {
    this.licence_plate = null;
  }

  /** Returns true if field licence_plate is set (has been assigned a value) and false otherwise */
  public boolean isSetLicence_plate() {
    return this.licence_plate != null;
  }

  public void setLicence_plateIsSet(boolean value) {
    if (!value) {
      this.licence_plate = null;
    }
  }

  public byte[] getLicence_plate_color() {
    setLicence_plate_color(org.apache.thrift.TBaseHelper.rightSize(licence_plate_color));
    return licence_plate_color == null ? null : licence_plate_color.array();
  }

  public ByteBuffer bufferForLicence_plate_color() {
    return licence_plate_color;
  }

  public InputRecordBuffer setLicence_plate_color(byte[] licence_plate_color) {
    setLicence_plate_color(licence_plate_color == null ? (ByteBuffer)null : ByteBuffer.wrap(licence_plate_color));
    return this;
  }

  public InputRecordBuffer setLicence_plate_color(ByteBuffer licence_plate_color) {
    this.licence_plate_color = licence_plate_color;
    return this;
  }

  public void unsetLicence_plate_color() {
    this.licence_plate_color = null;
  }

  /** Returns true if field licence_plate_color is set (has been assigned a value) and false otherwise */
  public boolean isSetLicence_plate_color() {
    return this.licence_plate_color != null;
  }

  public void setLicence_plate_colorIsSet(boolean value) {
    if (!value) {
      this.licence_plate_color = null;
    }
  }

  public byte[] getVehicle_type() {
    setVehicle_type(org.apache.thrift.TBaseHelper.rightSize(vehicle_type));
    return vehicle_type == null ? null : vehicle_type.array();
  }

  public ByteBuffer bufferForVehicle_type() {
    return vehicle_type;
  }

  public InputRecordBuffer setVehicle_type(byte[] vehicle_type) {
    setVehicle_type(vehicle_type == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_type));
    return this;
  }

  public InputRecordBuffer setVehicle_type(ByteBuffer vehicle_type) {
    this.vehicle_type = vehicle_type;
    return this;
  }

  public void unsetVehicle_type() {
    this.vehicle_type = null;
  }

  /** Returns true if field vehicle_type is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_type() {
    return this.vehicle_type != null;
  }

  public void setVehicle_typeIsSet(boolean value) {
    if (!value) {
      this.vehicle_type = null;
    }
  }

  public byte[] getVehicle_color() {
    setVehicle_color(org.apache.thrift.TBaseHelper.rightSize(vehicle_color));
    return vehicle_color == null ? null : vehicle_color.array();
  }

  public ByteBuffer bufferForVehicle_color() {
    return vehicle_color;
  }

  public InputRecordBuffer setVehicle_color(byte[] vehicle_color) {
    setVehicle_color(vehicle_color == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_color));
    return this;
  }

  public InputRecordBuffer setVehicle_color(ByteBuffer vehicle_color) {
    this.vehicle_color = vehicle_color;
    return this;
  }

  public void unsetVehicle_color() {
    this.vehicle_color = null;
  }

  /** Returns true if field vehicle_color is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_color() {
    return this.vehicle_color != null;
  }

  public void setVehicle_colorIsSet(boolean value) {
    if (!value) {
      this.vehicle_color = null;
    }
  }

  public byte[] getVehicle_logo() {
    setVehicle_logo(org.apache.thrift.TBaseHelper.rightSize(vehicle_logo));
    return vehicle_logo == null ? null : vehicle_logo.array();
  }

  public ByteBuffer bufferForVehicle_logo() {
    return vehicle_logo;
  }

  public InputRecordBuffer setVehicle_logo(byte[] vehicle_logo) {
    setVehicle_logo(vehicle_logo == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_logo));
    return this;
  }

  public InputRecordBuffer setVehicle_logo(ByteBuffer vehicle_logo) {
    this.vehicle_logo = vehicle_logo;
    return this;
  }

  public void unsetVehicle_logo() {
    this.vehicle_logo = null;
  }

  /** Returns true if field vehicle_logo is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_logo() {
    return this.vehicle_logo != null;
  }

  public void setVehicle_logoIsSet(boolean value) {
    if (!value) {
      this.vehicle_logo = null;
    }
  }

  public byte[] getVehicle_child_logo() {
    setVehicle_child_logo(org.apache.thrift.TBaseHelper.rightSize(vehicle_child_logo));
    return vehicle_child_logo == null ? null : vehicle_child_logo.array();
  }

  public ByteBuffer bufferForVehicle_child_logo() {
    return vehicle_child_logo;
  }

  public InputRecordBuffer setVehicle_child_logo(byte[] vehicle_child_logo) {
    setVehicle_child_logo(vehicle_child_logo == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_child_logo));
    return this;
  }

  public InputRecordBuffer setVehicle_child_logo(ByteBuffer vehicle_child_logo) {
    this.vehicle_child_logo = vehicle_child_logo;
    return this;
  }

  public void unsetVehicle_child_logo() {
    this.vehicle_child_logo = null;
  }

  /** Returns true if field vehicle_child_logo is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_child_logo() {
    return this.vehicle_child_logo != null;
  }

  public void setVehicle_child_logoIsSet(boolean value) {
    if (!value) {
      this.vehicle_child_logo = null;
    }
  }

  public byte[] getVehicle_style() {
    setVehicle_style(org.apache.thrift.TBaseHelper.rightSize(vehicle_style));
    return vehicle_style == null ? null : vehicle_style.array();
  }

  public ByteBuffer bufferForVehicle_style() {
    return vehicle_style;
  }

  public InputRecordBuffer setVehicle_style(byte[] vehicle_style) {
    setVehicle_style(vehicle_style == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_style));
    return this;
  }

  public InputRecordBuffer setVehicle_style(ByteBuffer vehicle_style) {
    this.vehicle_style = vehicle_style;
    return this;
  }

  public void unsetVehicle_style() {
    this.vehicle_style = null;
  }

  /** Returns true if field vehicle_style is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_style() {
    return this.vehicle_style != null;
  }

  public void setVehicle_styleIsSet(boolean value) {
    if (!value) {
      this.vehicle_style = null;
    }
  }

  public byte[] getRecord_id() {
    setRecord_id(org.apache.thrift.TBaseHelper.rightSize(record_id));
    return record_id == null ? null : record_id.array();
  }

  public ByteBuffer bufferForRecord_id() {
    return record_id;
  }

  public InputRecordBuffer setRecord_id(byte[] record_id) {
    setRecord_id(record_id == null ? (ByteBuffer)null : ByteBuffer.wrap(record_id));
    return this;
  }

  public InputRecordBuffer setRecord_id(ByteBuffer record_id) {
    this.record_id = record_id;
    return this;
  }

  public void unsetRecord_id() {
    this.record_id = null;
  }

  /** Returns true if field record_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_id() {
    return this.record_id != null;
  }

  public void setRecord_idIsSet(boolean value) {
    if (!value) {
      this.record_id = null;
    }
  }

  public byte[] getVehicle_feature() {
    setVehicle_feature(org.apache.thrift.TBaseHelper.rightSize(vehicle_feature));
    return vehicle_feature == null ? null : vehicle_feature.array();
  }

  public ByteBuffer bufferForVehicle_feature() {
    return vehicle_feature;
  }

  public InputRecordBuffer setVehicle_feature(byte[] vehicle_feature) {
    setVehicle_feature(vehicle_feature == null ? (ByteBuffer)null : ByteBuffer.wrap(vehicle_feature));
    return this;
  }

  public InputRecordBuffer setVehicle_feature(ByteBuffer vehicle_feature) {
    this.vehicle_feature = vehicle_feature;
    return this;
  }

  public void unsetVehicle_feature() {
    this.vehicle_feature = null;
  }

  /** Returns true if field vehicle_feature is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_feature() {
    return this.vehicle_feature != null;
  }

  public void setVehicle_featureIsSet(boolean value) {
    if (!value) {
      this.vehicle_feature = null;
    }
  }

  public byte getSource_type() {
    return this.source_type;
  }

  public InputRecordBuffer setSource_type(byte source_type) {
    this.source_type = source_type;
    setSource_typeIsSet(true);
    return this;
  }

  public void unsetSource_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID);
  }

  /** Returns true if field source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID);
  }

  public void setSource_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID, value);
  }

  public double getConfidence_level() {
    return this.confidence_level;
  }

  public InputRecordBuffer setConfidence_level(double confidence_level) {
    this.confidence_level = confidence_level;
    setConfidence_levelIsSet(true);
    return this;
  }

  public void unsetConfidence_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_LEVEL_ISSET_ID);
  }

  /** Returns true if field confidence_level is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence_level() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_LEVEL_ISSET_ID);
  }

  public void setConfidence_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_LEVEL_ISSET_ID, value);
  }

  public double getPlate_confidence() {
    return this.plate_confidence;
  }

  public InputRecordBuffer setPlate_confidence(double plate_confidence) {
    this.plate_confidence = plate_confidence;
    setPlate_confidenceIsSet(true);
    return this;
  }

  public void unsetPlate_confidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATE_CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field plate_confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetPlate_confidence() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATE_CONFIDENCE_ISSET_ID);
  }

  public void setPlate_confidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATE_CONFIDENCE_ISSET_ID, value);
  }

  public double getLogo_confidence() {
    return this.logo_confidence;
  }

  public InputRecordBuffer setLogo_confidence(double logo_confidence) {
    this.logo_confidence = logo_confidence;
    setLogo_confidenceIsSet(true);
    return this;
  }

  public void unsetLogo_confidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGO_CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field logo_confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo_confidence() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGO_CONFIDENCE_ISSET_ID);
  }

  public void setLogo_confidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGO_CONFIDENCE_ISSET_ID, value);
  }

  public int getVehicle_left_x() {
    return this.vehicle_left_x;
  }

  public InputRecordBuffer setVehicle_left_x(int vehicle_left_x) {
    this.vehicle_left_x = vehicle_left_x;
    setVehicle_left_xIsSet(true);
    return this;
  }

  public void unsetVehicle_left_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLE_LEFT_X_ISSET_ID);
  }

  /** Returns true if field vehicle_left_x is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_left_x() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLE_LEFT_X_ISSET_ID);
  }

  public void setVehicle_left_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLE_LEFT_X_ISSET_ID, value);
  }

  public int getVehicle_left_y() {
    return this.vehicle_left_y;
  }

  public InputRecordBuffer setVehicle_left_y(int vehicle_left_y) {
    this.vehicle_left_y = vehicle_left_y;
    setVehicle_left_yIsSet(true);
    return this;
  }

  public void unsetVehicle_left_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLE_LEFT_Y_ISSET_ID);
  }

  /** Returns true if field vehicle_left_y is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_left_y() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLE_LEFT_Y_ISSET_ID);
  }

  public void setVehicle_left_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLE_LEFT_Y_ISSET_ID, value);
  }

  public int getVehicle_rigth_x() {
    return this.vehicle_rigth_x;
  }

  public InputRecordBuffer setVehicle_rigth_x(int vehicle_rigth_x) {
    this.vehicle_rigth_x = vehicle_rigth_x;
    setVehicle_rigth_xIsSet(true);
    return this;
  }

  public void unsetVehicle_rigth_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLE_RIGTH_X_ISSET_ID);
  }

  /** Returns true if field vehicle_rigth_x is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_rigth_x() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLE_RIGTH_X_ISSET_ID);
  }

  public void setVehicle_rigth_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLE_RIGTH_X_ISSET_ID, value);
  }

  public int getVehicle_rigth_y() {
    return this.vehicle_rigth_y;
  }

  public InputRecordBuffer setVehicle_rigth_y(int vehicle_rigth_y) {
    this.vehicle_rigth_y = vehicle_rigth_y;
    setVehicle_rigth_yIsSet(true);
    return this;
  }

  public void unsetVehicle_rigth_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLE_RIGTH_Y_ISSET_ID);
  }

  /** Returns true if field vehicle_rigth_y is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle_rigth_y() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLE_RIGTH_Y_ISSET_ID);
  }

  public void setVehicle_rigth_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLE_RIGTH_Y_ISSET_ID, value);
  }

  public byte[] getOld_licence_plate() {
    setOld_licence_plate(org.apache.thrift.TBaseHelper.rightSize(old_licence_plate));
    return old_licence_plate == null ? null : old_licence_plate.array();
  }

  public ByteBuffer bufferForOld_licence_plate() {
    return old_licence_plate;
  }

  public InputRecordBuffer setOld_licence_plate(byte[] old_licence_plate) {
    setOld_licence_plate(old_licence_plate == null ? (ByteBuffer)null : ByteBuffer.wrap(old_licence_plate));
    return this;
  }

  public InputRecordBuffer setOld_licence_plate(ByteBuffer old_licence_plate) {
    this.old_licence_plate = old_licence_plate;
    return this;
  }

  public void unsetOld_licence_plate() {
    this.old_licence_plate = null;
  }

  /** Returns true if field old_licence_plate is set (has been assigned a value) and false otherwise */
  public boolean isSetOld_licence_plate() {
    return this.old_licence_plate != null;
  }

  public void setOld_licence_plateIsSet(boolean value) {
    if (!value) {
      this.old_licence_plate = null;
    }
  }

  public byte[] getTraffic_time() {
    setTraffic_time(org.apache.thrift.TBaseHelper.rightSize(traffic_time));
    return traffic_time == null ? null : traffic_time.array();
  }

  public ByteBuffer bufferForTraffic_time() {
    return traffic_time;
  }

  public InputRecordBuffer setTraffic_time(byte[] traffic_time) {
    setTraffic_time(traffic_time == null ? (ByteBuffer)null : ByteBuffer.wrap(traffic_time));
    return this;
  }

  public InputRecordBuffer setTraffic_time(ByteBuffer traffic_time) {
    this.traffic_time = traffic_time;
    return this;
  }

  public void unsetTraffic_time() {
    this.traffic_time = null;
  }

  /** Returns true if field traffic_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTraffic_time() {
    return this.traffic_time != null;
  }

  public void setTraffic_timeIsSet(boolean value) {
    if (!value) {
      this.traffic_time = null;
    }
  }

  public int getHead_rear() {
    return this.head_rear;
  }

  public InputRecordBuffer setHead_rear(int head_rear) {
    this.head_rear = head_rear;
    setHead_rearIsSet(true);
    return this;
  }

  public void unsetHead_rear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAD_REAR_ISSET_ID);
  }

  /** Returns true if field head_rear is set (has been assigned a value) and false otherwise */
  public boolean isSetHead_rear() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAD_REAR_ISSET_ID);
  }

  public void setHead_rearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAD_REAR_ISSET_ID, value);
  }

  public byte[] getTraffic_kkbh() {
    setTraffic_kkbh(org.apache.thrift.TBaseHelper.rightSize(traffic_kkbh));
    return traffic_kkbh == null ? null : traffic_kkbh.array();
  }

  public ByteBuffer bufferForTraffic_kkbh() {
    return traffic_kkbh;
  }

  public InputRecordBuffer setTraffic_kkbh(byte[] traffic_kkbh) {
    setTraffic_kkbh(traffic_kkbh == null ? (ByteBuffer)null : ByteBuffer.wrap(traffic_kkbh));
    return this;
  }

  public InputRecordBuffer setTraffic_kkbh(ByteBuffer traffic_kkbh) {
    this.traffic_kkbh = traffic_kkbh;
    return this;
  }

  public void unsetTraffic_kkbh() {
    this.traffic_kkbh = null;
  }

  /** Returns true if field traffic_kkbh is set (has been assigned a value) and false otherwise */
  public boolean isSetTraffic_kkbh() {
    return this.traffic_kkbh != null;
  }

  public void setTraffic_kkbhIsSet(boolean value) {
    if (!value) {
      this.traffic_kkbh = null;
    }
  }

  public byte[] getTraffic_xzqh() {
    setTraffic_xzqh(org.apache.thrift.TBaseHelper.rightSize(traffic_xzqh));
    return traffic_xzqh == null ? null : traffic_xzqh.array();
  }

  public ByteBuffer bufferForTraffic_xzqh() {
    return traffic_xzqh;
  }

  public InputRecordBuffer setTraffic_xzqh(byte[] traffic_xzqh) {
    setTraffic_xzqh(traffic_xzqh == null ? (ByteBuffer)null : ByteBuffer.wrap(traffic_xzqh));
    return this;
  }

  public InputRecordBuffer setTraffic_xzqh(ByteBuffer traffic_xzqh) {
    this.traffic_xzqh = traffic_xzqh;
    return this;
  }

  public void unsetTraffic_xzqh() {
    this.traffic_xzqh = null;
  }

  /** Returns true if field traffic_xzqh is set (has been assigned a value) and false otherwise */
  public boolean isSetTraffic_xzqh() {
    return this.traffic_xzqh != null;
  }

  public void setTraffic_xzqhIsSet(boolean value) {
    if (!value) {
      this.traffic_xzqh = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LICENCE_PLATE:
      if (value == null) {
        unsetLicence_plate();
      } else {
        setLicence_plate((ByteBuffer)value);
      }
      break;

    case LICENCE_PLATE_COLOR:
      if (value == null) {
        unsetLicence_plate_color();
      } else {
        setLicence_plate_color((ByteBuffer)value);
      }
      break;

    case VEHICLE_TYPE:
      if (value == null) {
        unsetVehicle_type();
      } else {
        setVehicle_type((ByteBuffer)value);
      }
      break;

    case VEHICLE_COLOR:
      if (value == null) {
        unsetVehicle_color();
      } else {
        setVehicle_color((ByteBuffer)value);
      }
      break;

    case VEHICLE_LOGO:
      if (value == null) {
        unsetVehicle_logo();
      } else {
        setVehicle_logo((ByteBuffer)value);
      }
      break;

    case VEHICLE_CHILD_LOGO:
      if (value == null) {
        unsetVehicle_child_logo();
      } else {
        setVehicle_child_logo((ByteBuffer)value);
      }
      break;

    case VEHICLE_STYLE:
      if (value == null) {
        unsetVehicle_style();
      } else {
        setVehicle_style((ByteBuffer)value);
      }
      break;

    case RECORD_ID:
      if (value == null) {
        unsetRecord_id();
      } else {
        setRecord_id((ByteBuffer)value);
      }
      break;

    case VEHICLE_FEATURE:
      if (value == null) {
        unsetVehicle_feature();
      } else {
        setVehicle_feature((ByteBuffer)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSource_type();
      } else {
        setSource_type((Byte)value);
      }
      break;

    case CONFIDENCE_LEVEL:
      if (value == null) {
        unsetConfidence_level();
      } else {
        setConfidence_level((Double)value);
      }
      break;

    case PLATE_CONFIDENCE:
      if (value == null) {
        unsetPlate_confidence();
      } else {
        setPlate_confidence((Double)value);
      }
      break;

    case LOGO_CONFIDENCE:
      if (value == null) {
        unsetLogo_confidence();
      } else {
        setLogo_confidence((Double)value);
      }
      break;

    case VEHICLE_LEFT_X:
      if (value == null) {
        unsetVehicle_left_x();
      } else {
        setVehicle_left_x((Integer)value);
      }
      break;

    case VEHICLE_LEFT_Y:
      if (value == null) {
        unsetVehicle_left_y();
      } else {
        setVehicle_left_y((Integer)value);
      }
      break;

    case VEHICLE_RIGTH_X:
      if (value == null) {
        unsetVehicle_rigth_x();
      } else {
        setVehicle_rigth_x((Integer)value);
      }
      break;

    case VEHICLE_RIGTH_Y:
      if (value == null) {
        unsetVehicle_rigth_y();
      } else {
        setVehicle_rigth_y((Integer)value);
      }
      break;

    case OLD_LICENCE_PLATE:
      if (value == null) {
        unsetOld_licence_plate();
      } else {
        setOld_licence_plate((ByteBuffer)value);
      }
      break;

    case TRAFFIC_TIME:
      if (value == null) {
        unsetTraffic_time();
      } else {
        setTraffic_time((ByteBuffer)value);
      }
      break;

    case HEAD_REAR:
      if (value == null) {
        unsetHead_rear();
      } else {
        setHead_rear((Integer)value);
      }
      break;

    case TRAFFIC_KKBH:
      if (value == null) {
        unsetTraffic_kkbh();
      } else {
        setTraffic_kkbh((ByteBuffer)value);
      }
      break;

    case TRAFFIC_XZQH:
      if (value == null) {
        unsetTraffic_xzqh();
      } else {
        setTraffic_xzqh((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LICENCE_PLATE:
      return getLicence_plate();

    case LICENCE_PLATE_COLOR:
      return getLicence_plate_color();

    case VEHICLE_TYPE:
      return getVehicle_type();

    case VEHICLE_COLOR:
      return getVehicle_color();

    case VEHICLE_LOGO:
      return getVehicle_logo();

    case VEHICLE_CHILD_LOGO:
      return getVehicle_child_logo();

    case VEHICLE_STYLE:
      return getVehicle_style();

    case RECORD_ID:
      return getRecord_id();

    case VEHICLE_FEATURE:
      return getVehicle_feature();

    case SOURCE_TYPE:
      return Byte.valueOf(getSource_type());

    case CONFIDENCE_LEVEL:
      return Double.valueOf(getConfidence_level());

    case PLATE_CONFIDENCE:
      return Double.valueOf(getPlate_confidence());

    case LOGO_CONFIDENCE:
      return Double.valueOf(getLogo_confidence());

    case VEHICLE_LEFT_X:
      return Integer.valueOf(getVehicle_left_x());

    case VEHICLE_LEFT_Y:
      return Integer.valueOf(getVehicle_left_y());

    case VEHICLE_RIGTH_X:
      return Integer.valueOf(getVehicle_rigth_x());

    case VEHICLE_RIGTH_Y:
      return Integer.valueOf(getVehicle_rigth_y());

    case OLD_LICENCE_PLATE:
      return getOld_licence_plate();

    case TRAFFIC_TIME:
      return getTraffic_time();

    case HEAD_REAR:
      return Integer.valueOf(getHead_rear());

    case TRAFFIC_KKBH:
      return getTraffic_kkbh();

    case TRAFFIC_XZQH:
      return getTraffic_xzqh();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LICENCE_PLATE:
      return isSetLicence_plate();
    case LICENCE_PLATE_COLOR:
      return isSetLicence_plate_color();
    case VEHICLE_TYPE:
      return isSetVehicle_type();
    case VEHICLE_COLOR:
      return isSetVehicle_color();
    case VEHICLE_LOGO:
      return isSetVehicle_logo();
    case VEHICLE_CHILD_LOGO:
      return isSetVehicle_child_logo();
    case VEHICLE_STYLE:
      return isSetVehicle_style();
    case RECORD_ID:
      return isSetRecord_id();
    case VEHICLE_FEATURE:
      return isSetVehicle_feature();
    case SOURCE_TYPE:
      return isSetSource_type();
    case CONFIDENCE_LEVEL:
      return isSetConfidence_level();
    case PLATE_CONFIDENCE:
      return isSetPlate_confidence();
    case LOGO_CONFIDENCE:
      return isSetLogo_confidence();
    case VEHICLE_LEFT_X:
      return isSetVehicle_left_x();
    case VEHICLE_LEFT_Y:
      return isSetVehicle_left_y();
    case VEHICLE_RIGTH_X:
      return isSetVehicle_rigth_x();
    case VEHICLE_RIGTH_Y:
      return isSetVehicle_rigth_y();
    case OLD_LICENCE_PLATE:
      return isSetOld_licence_plate();
    case TRAFFIC_TIME:
      return isSetTraffic_time();
    case HEAD_REAR:
      return isSetHead_rear();
    case TRAFFIC_KKBH:
      return isSetTraffic_kkbh();
    case TRAFFIC_XZQH:
      return isSetTraffic_xzqh();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InputRecordBuffer)
      return this.equals((InputRecordBuffer)that);
    return false;
  }

  public boolean equals(InputRecordBuffer that) {
    if (that == null)
      return false;

    boolean this_present_licence_plate = true && this.isSetLicence_plate();
    boolean that_present_licence_plate = true && that.isSetLicence_plate();
    if (this_present_licence_plate || that_present_licence_plate) {
      if (!(this_present_licence_plate && that_present_licence_plate))
        return false;
      if (!this.licence_plate.equals(that.licence_plate))
        return false;
    }

    boolean this_present_licence_plate_color = true && this.isSetLicence_plate_color();
    boolean that_present_licence_plate_color = true && that.isSetLicence_plate_color();
    if (this_present_licence_plate_color || that_present_licence_plate_color) {
      if (!(this_present_licence_plate_color && that_present_licence_plate_color))
        return false;
      if (!this.licence_plate_color.equals(that.licence_plate_color))
        return false;
    }

    boolean this_present_vehicle_type = true && this.isSetVehicle_type();
    boolean that_present_vehicle_type = true && that.isSetVehicle_type();
    if (this_present_vehicle_type || that_present_vehicle_type) {
      if (!(this_present_vehicle_type && that_present_vehicle_type))
        return false;
      if (!this.vehicle_type.equals(that.vehicle_type))
        return false;
    }

    boolean this_present_vehicle_color = true && this.isSetVehicle_color();
    boolean that_present_vehicle_color = true && that.isSetVehicle_color();
    if (this_present_vehicle_color || that_present_vehicle_color) {
      if (!(this_present_vehicle_color && that_present_vehicle_color))
        return false;
      if (!this.vehicle_color.equals(that.vehicle_color))
        return false;
    }

    boolean this_present_vehicle_logo = true && this.isSetVehicle_logo();
    boolean that_present_vehicle_logo = true && that.isSetVehicle_logo();
    if (this_present_vehicle_logo || that_present_vehicle_logo) {
      if (!(this_present_vehicle_logo && that_present_vehicle_logo))
        return false;
      if (!this.vehicle_logo.equals(that.vehicle_logo))
        return false;
    }

    boolean this_present_vehicle_child_logo = true && this.isSetVehicle_child_logo();
    boolean that_present_vehicle_child_logo = true && that.isSetVehicle_child_logo();
    if (this_present_vehicle_child_logo || that_present_vehicle_child_logo) {
      if (!(this_present_vehicle_child_logo && that_present_vehicle_child_logo))
        return false;
      if (!this.vehicle_child_logo.equals(that.vehicle_child_logo))
        return false;
    }

    boolean this_present_vehicle_style = true && this.isSetVehicle_style();
    boolean that_present_vehicle_style = true && that.isSetVehicle_style();
    if (this_present_vehicle_style || that_present_vehicle_style) {
      if (!(this_present_vehicle_style && that_present_vehicle_style))
        return false;
      if (!this.vehicle_style.equals(that.vehicle_style))
        return false;
    }

    boolean this_present_record_id = true && this.isSetRecord_id();
    boolean that_present_record_id = true && that.isSetRecord_id();
    if (this_present_record_id || that_present_record_id) {
      if (!(this_present_record_id && that_present_record_id))
        return false;
      if (!this.record_id.equals(that.record_id))
        return false;
    }

    boolean this_present_vehicle_feature = true && this.isSetVehicle_feature();
    boolean that_present_vehicle_feature = true && that.isSetVehicle_feature();
    if (this_present_vehicle_feature || that_present_vehicle_feature) {
      if (!(this_present_vehicle_feature && that_present_vehicle_feature))
        return false;
      if (!this.vehicle_feature.equals(that.vehicle_feature))
        return false;
    }

    boolean this_present_source_type = true;
    boolean that_present_source_type = true;
    if (this_present_source_type || that_present_source_type) {
      if (!(this_present_source_type && that_present_source_type))
        return false;
      if (this.source_type != that.source_type)
        return false;
    }

    boolean this_present_confidence_level = true;
    boolean that_present_confidence_level = true;
    if (this_present_confidence_level || that_present_confidence_level) {
      if (!(this_present_confidence_level && that_present_confidence_level))
        return false;
      if (this.confidence_level != that.confidence_level)
        return false;
    }

    boolean this_present_plate_confidence = true;
    boolean that_present_plate_confidence = true;
    if (this_present_plate_confidence || that_present_plate_confidence) {
      if (!(this_present_plate_confidence && that_present_plate_confidence))
        return false;
      if (this.plate_confidence != that.plate_confidence)
        return false;
    }

    boolean this_present_logo_confidence = true;
    boolean that_present_logo_confidence = true;
    if (this_present_logo_confidence || that_present_logo_confidence) {
      if (!(this_present_logo_confidence && that_present_logo_confidence))
        return false;
      if (this.logo_confidence != that.logo_confidence)
        return false;
    }

    boolean this_present_vehicle_left_x = true;
    boolean that_present_vehicle_left_x = true;
    if (this_present_vehicle_left_x || that_present_vehicle_left_x) {
      if (!(this_present_vehicle_left_x && that_present_vehicle_left_x))
        return false;
      if (this.vehicle_left_x != that.vehicle_left_x)
        return false;
    }

    boolean this_present_vehicle_left_y = true;
    boolean that_present_vehicle_left_y = true;
    if (this_present_vehicle_left_y || that_present_vehicle_left_y) {
      if (!(this_present_vehicle_left_y && that_present_vehicle_left_y))
        return false;
      if (this.vehicle_left_y != that.vehicle_left_y)
        return false;
    }

    boolean this_present_vehicle_rigth_x = true;
    boolean that_present_vehicle_rigth_x = true;
    if (this_present_vehicle_rigth_x || that_present_vehicle_rigth_x) {
      if (!(this_present_vehicle_rigth_x && that_present_vehicle_rigth_x))
        return false;
      if (this.vehicle_rigth_x != that.vehicle_rigth_x)
        return false;
    }

    boolean this_present_vehicle_rigth_y = true;
    boolean that_present_vehicle_rigth_y = true;
    if (this_present_vehicle_rigth_y || that_present_vehicle_rigth_y) {
      if (!(this_present_vehicle_rigth_y && that_present_vehicle_rigth_y))
        return false;
      if (this.vehicle_rigth_y != that.vehicle_rigth_y)
        return false;
    }

    boolean this_present_old_licence_plate = true && this.isSetOld_licence_plate();
    boolean that_present_old_licence_plate = true && that.isSetOld_licence_plate();
    if (this_present_old_licence_plate || that_present_old_licence_plate) {
      if (!(this_present_old_licence_plate && that_present_old_licence_plate))
        return false;
      if (!this.old_licence_plate.equals(that.old_licence_plate))
        return false;
    }

    boolean this_present_traffic_time = true && this.isSetTraffic_time();
    boolean that_present_traffic_time = true && that.isSetTraffic_time();
    if (this_present_traffic_time || that_present_traffic_time) {
      if (!(this_present_traffic_time && that_present_traffic_time))
        return false;
      if (!this.traffic_time.equals(that.traffic_time))
        return false;
    }

    boolean this_present_head_rear = true;
    boolean that_present_head_rear = true;
    if (this_present_head_rear || that_present_head_rear) {
      if (!(this_present_head_rear && that_present_head_rear))
        return false;
      if (this.head_rear != that.head_rear)
        return false;
    }

    boolean this_present_traffic_kkbh = true && this.isSetTraffic_kkbh();
    boolean that_present_traffic_kkbh = true && that.isSetTraffic_kkbh();
    if (this_present_traffic_kkbh || that_present_traffic_kkbh) {
      if (!(this_present_traffic_kkbh && that_present_traffic_kkbh))
        return false;
      if (!this.traffic_kkbh.equals(that.traffic_kkbh))
        return false;
    }

    boolean this_present_traffic_xzqh = true && this.isSetTraffic_xzqh();
    boolean that_present_traffic_xzqh = true && that.isSetTraffic_xzqh();
    if (this_present_traffic_xzqh || that_present_traffic_xzqh) {
      if (!(this_present_traffic_xzqh && that_present_traffic_xzqh))
        return false;
      if (!this.traffic_xzqh.equals(that.traffic_xzqh))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InputRecordBuffer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InputRecordBuffer typedOther = (InputRecordBuffer)other;

    lastComparison = Boolean.valueOf(isSetLicence_plate()).compareTo(typedOther.isSetLicence_plate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicence_plate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licence_plate, typedOther.licence_plate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLicence_plate_color()).compareTo(typedOther.isSetLicence_plate_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicence_plate_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licence_plate_color, typedOther.licence_plate_color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_type()).compareTo(typedOther.isSetVehicle_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_type, typedOther.vehicle_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_color()).compareTo(typedOther.isSetVehicle_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_color, typedOther.vehicle_color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_logo()).compareTo(typedOther.isSetVehicle_logo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_logo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_logo, typedOther.vehicle_logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_child_logo()).compareTo(typedOther.isSetVehicle_child_logo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_child_logo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_child_logo, typedOther.vehicle_child_logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_style()).compareTo(typedOther.isSetVehicle_style());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_style()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_style, typedOther.vehicle_style);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord_id()).compareTo(typedOther.isSetRecord_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_id, typedOther.record_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_feature()).compareTo(typedOther.isSetVehicle_feature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_feature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_feature, typedOther.vehicle_feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_type()).compareTo(typedOther.isSetSource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_type, typedOther.source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence_level()).compareTo(typedOther.isSetConfidence_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence_level, typedOther.confidence_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlate_confidence()).compareTo(typedOther.isSetPlate_confidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlate_confidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plate_confidence, typedOther.plate_confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo_confidence()).compareTo(typedOther.isSetLogo_confidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo_confidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo_confidence, typedOther.logo_confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_left_x()).compareTo(typedOther.isSetVehicle_left_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_left_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_left_x, typedOther.vehicle_left_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_left_y()).compareTo(typedOther.isSetVehicle_left_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_left_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_left_y, typedOther.vehicle_left_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_rigth_x()).compareTo(typedOther.isSetVehicle_rigth_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_rigth_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_rigth_x, typedOther.vehicle_rigth_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle_rigth_y()).compareTo(typedOther.isSetVehicle_rigth_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle_rigth_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle_rigth_y, typedOther.vehicle_rigth_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOld_licence_plate()).compareTo(typedOther.isSetOld_licence_plate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOld_licence_plate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_licence_plate, typedOther.old_licence_plate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraffic_time()).compareTo(typedOther.isSetTraffic_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraffic_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traffic_time, typedOther.traffic_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHead_rear()).compareTo(typedOther.isSetHead_rear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead_rear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head_rear, typedOther.head_rear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraffic_kkbh()).compareTo(typedOther.isSetTraffic_kkbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraffic_kkbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traffic_kkbh, typedOther.traffic_kkbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraffic_xzqh()).compareTo(typedOther.isSetTraffic_xzqh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraffic_xzqh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traffic_xzqh, typedOther.traffic_xzqh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InputRecordBuffer(");
    boolean first = true;

    sb.append("licence_plate:");
    if (this.licence_plate == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.licence_plate, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("licence_plate_color:");
    if (this.licence_plate_color == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.licence_plate_color, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_type:");
    if (this.vehicle_type == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_type, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_color:");
    if (this.vehicle_color == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_color, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_logo:");
    if (this.vehicle_logo == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_logo, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_child_logo:");
    if (this.vehicle_child_logo == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_child_logo, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_style:");
    if (this.vehicle_style == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_style, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record_id:");
    if (this.record_id == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.record_id, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_feature:");
    if (this.vehicle_feature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.vehicle_feature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source_type:");
    sb.append(this.source_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidence_level:");
    sb.append(this.confidence_level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plate_confidence:");
    sb.append(this.plate_confidence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo_confidence:");
    sb.append(this.logo_confidence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_left_x:");
    sb.append(this.vehicle_left_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_left_y:");
    sb.append(this.vehicle_left_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_rigth_x:");
    sb.append(this.vehicle_rigth_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle_rigth_y:");
    sb.append(this.vehicle_rigth_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("old_licence_plate:");
    if (this.old_licence_plate == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.old_licence_plate, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traffic_time:");
    if (this.traffic_time == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.traffic_time, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("head_rear:");
    sb.append(this.head_rear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traffic_kkbh:");
    if (this.traffic_kkbh == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.traffic_kkbh, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traffic_xzqh:");
    if (this.traffic_xzqh == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.traffic_xzqh, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InputRecordBufferStandardSchemeFactory implements SchemeFactory {
    public InputRecordBufferStandardScheme getScheme() {
      return new InputRecordBufferStandardScheme();
    }
  }

  private static class InputRecordBufferStandardScheme extends StandardScheme<InputRecordBuffer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InputRecordBuffer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LICENCE_PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.licence_plate = iprot.readBinary();
              struct.setLicence_plateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LICENCE_PLATE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.licence_plate_color = iprot.readBinary();
              struct.setLicence_plate_colorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VEHICLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_type = iprot.readBinary();
              struct.setVehicle_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VEHICLE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_color = iprot.readBinary();
              struct.setVehicle_colorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VEHICLE_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_logo = iprot.readBinary();
              struct.setVehicle_logoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VEHICLE_CHILD_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_child_logo = iprot.readBinary();
              struct.setVehicle_child_logoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VEHICLE_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_style = iprot.readBinary();
              struct.setVehicle_styleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.record_id = iprot.readBinary();
              struct.setRecord_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VEHICLE_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicle_feature = iprot.readBinary();
              struct.setVehicle_featureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.source_type = iprot.readByte();
              struct.setSource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONFIDENCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence_level = iprot.readDouble();
              struct.setConfidence_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLATE_CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.plate_confidence = iprot.readDouble();
              struct.setPlate_confidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOGO_CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.logo_confidence = iprot.readDouble();
              struct.setLogo_confidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VEHICLE_LEFT_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicle_left_x = iprot.readI32();
              struct.setVehicle_left_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VEHICLE_LEFT_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicle_left_y = iprot.readI32();
              struct.setVehicle_left_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // VEHICLE_RIGTH_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicle_rigth_x = iprot.readI32();
              struct.setVehicle_rigth_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VEHICLE_RIGTH_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicle_rigth_y = iprot.readI32();
              struct.setVehicle_rigth_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OLD_LICENCE_PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.old_licence_plate = iprot.readBinary();
              struct.setOld_licence_plateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRAFFIC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traffic_time = iprot.readBinary();
              struct.setTraffic_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HEAD_REAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.head_rear = iprot.readI32();
              struct.setHead_rearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRAFFIC_KKBH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traffic_kkbh = iprot.readBinary();
              struct.setTraffic_kkbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TRAFFIC_XZQH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traffic_xzqh = iprot.readBinary();
              struct.setTraffic_xzqhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InputRecordBuffer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.licence_plate != null) {
        oprot.writeFieldBegin(LICENCE_PLATE_FIELD_DESC);
        oprot.writeBinary(struct.licence_plate);
        oprot.writeFieldEnd();
      }
      if (struct.licence_plate_color != null) {
        oprot.writeFieldBegin(LICENCE_PLATE_COLOR_FIELD_DESC);
        oprot.writeBinary(struct.licence_plate_color);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_type != null) {
        oprot.writeFieldBegin(VEHICLE_TYPE_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_type);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_color != null) {
        oprot.writeFieldBegin(VEHICLE_COLOR_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_color);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_logo != null) {
        oprot.writeFieldBegin(VEHICLE_LOGO_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_logo);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_child_logo != null) {
        oprot.writeFieldBegin(VEHICLE_CHILD_LOGO_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_child_logo);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_style != null) {
        oprot.writeFieldBegin(VEHICLE_STYLE_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_style);
        oprot.writeFieldEnd();
      }
      if (struct.record_id != null) {
        oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
        oprot.writeBinary(struct.record_id);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle_feature != null) {
        oprot.writeFieldBegin(VEHICLE_FEATURE_FIELD_DESC);
        oprot.writeBinary(struct.vehicle_feature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.source_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_LEVEL_FIELD_DESC);
      oprot.writeDouble(struct.confidence_level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLATE_CONFIDENCE_FIELD_DESC);
      oprot.writeDouble(struct.plate_confidence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOGO_CONFIDENCE_FIELD_DESC);
      oprot.writeDouble(struct.logo_confidence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEHICLE_LEFT_X_FIELD_DESC);
      oprot.writeI32(struct.vehicle_left_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEHICLE_LEFT_Y_FIELD_DESC);
      oprot.writeI32(struct.vehicle_left_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEHICLE_RIGTH_X_FIELD_DESC);
      oprot.writeI32(struct.vehicle_rigth_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEHICLE_RIGTH_Y_FIELD_DESC);
      oprot.writeI32(struct.vehicle_rigth_y);
      oprot.writeFieldEnd();
      if (struct.old_licence_plate != null) {
        oprot.writeFieldBegin(OLD_LICENCE_PLATE_FIELD_DESC);
        oprot.writeBinary(struct.old_licence_plate);
        oprot.writeFieldEnd();
      }
      if (struct.traffic_time != null) {
        oprot.writeFieldBegin(TRAFFIC_TIME_FIELD_DESC);
        oprot.writeBinary(struct.traffic_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEAD_REAR_FIELD_DESC);
      oprot.writeI32(struct.head_rear);
      oprot.writeFieldEnd();
      if (struct.traffic_kkbh != null) {
        oprot.writeFieldBegin(TRAFFIC_KKBH_FIELD_DESC);
        oprot.writeBinary(struct.traffic_kkbh);
        oprot.writeFieldEnd();
      }
      if (struct.traffic_xzqh != null) {
        oprot.writeFieldBegin(TRAFFIC_XZQH_FIELD_DESC);
        oprot.writeBinary(struct.traffic_xzqh);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InputRecordBufferTupleSchemeFactory implements SchemeFactory {
    public InputRecordBufferTupleScheme getScheme() {
      return new InputRecordBufferTupleScheme();
    }
  }

  private static class InputRecordBufferTupleScheme extends TupleScheme<InputRecordBuffer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InputRecordBuffer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLicence_plate()) {
        optionals.set(0);
      }
      if (struct.isSetLicence_plate_color()) {
        optionals.set(1);
      }
      if (struct.isSetVehicle_type()) {
        optionals.set(2);
      }
      if (struct.isSetVehicle_color()) {
        optionals.set(3);
      }
      if (struct.isSetVehicle_logo()) {
        optionals.set(4);
      }
      if (struct.isSetVehicle_child_logo()) {
        optionals.set(5);
      }
      if (struct.isSetVehicle_style()) {
        optionals.set(6);
      }
      if (struct.isSetRecord_id()) {
        optionals.set(7);
      }
      if (struct.isSetVehicle_feature()) {
        optionals.set(8);
      }
      if (struct.isSetSource_type()) {
        optionals.set(9);
      }
      if (struct.isSetConfidence_level()) {
        optionals.set(10);
      }
      if (struct.isSetPlate_confidence()) {
        optionals.set(11);
      }
      if (struct.isSetLogo_confidence()) {
        optionals.set(12);
      }
      if (struct.isSetVehicle_left_x()) {
        optionals.set(13);
      }
      if (struct.isSetVehicle_left_y()) {
        optionals.set(14);
      }
      if (struct.isSetVehicle_rigth_x()) {
        optionals.set(15);
      }
      if (struct.isSetVehicle_rigth_y()) {
        optionals.set(16);
      }
      if (struct.isSetOld_licence_plate()) {
        optionals.set(17);
      }
      if (struct.isSetTraffic_time()) {
        optionals.set(18);
      }
      if (struct.isSetHead_rear()) {
        optionals.set(19);
      }
      if (struct.isSetTraffic_kkbh()) {
        optionals.set(20);
      }
      if (struct.isSetTraffic_xzqh()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetLicence_plate()) {
        oprot.writeBinary(struct.licence_plate);
      }
      if (struct.isSetLicence_plate_color()) {
        oprot.writeBinary(struct.licence_plate_color);
      }
      if (struct.isSetVehicle_type()) {
        oprot.writeBinary(struct.vehicle_type);
      }
      if (struct.isSetVehicle_color()) {
        oprot.writeBinary(struct.vehicle_color);
      }
      if (struct.isSetVehicle_logo()) {
        oprot.writeBinary(struct.vehicle_logo);
      }
      if (struct.isSetVehicle_child_logo()) {
        oprot.writeBinary(struct.vehicle_child_logo);
      }
      if (struct.isSetVehicle_style()) {
        oprot.writeBinary(struct.vehicle_style);
      }
      if (struct.isSetRecord_id()) {
        oprot.writeBinary(struct.record_id);
      }
      if (struct.isSetVehicle_feature()) {
        oprot.writeBinary(struct.vehicle_feature);
      }
      if (struct.isSetSource_type()) {
        oprot.writeByte(struct.source_type);
      }
      if (struct.isSetConfidence_level()) {
        oprot.writeDouble(struct.confidence_level);
      }
      if (struct.isSetPlate_confidence()) {
        oprot.writeDouble(struct.plate_confidence);
      }
      if (struct.isSetLogo_confidence()) {
        oprot.writeDouble(struct.logo_confidence);
      }
      if (struct.isSetVehicle_left_x()) {
        oprot.writeI32(struct.vehicle_left_x);
      }
      if (struct.isSetVehicle_left_y()) {
        oprot.writeI32(struct.vehicle_left_y);
      }
      if (struct.isSetVehicle_rigth_x()) {
        oprot.writeI32(struct.vehicle_rigth_x);
      }
      if (struct.isSetVehicle_rigth_y()) {
        oprot.writeI32(struct.vehicle_rigth_y);
      }
      if (struct.isSetOld_licence_plate()) {
        oprot.writeBinary(struct.old_licence_plate);
      }
      if (struct.isSetTraffic_time()) {
        oprot.writeBinary(struct.traffic_time);
      }
      if (struct.isSetHead_rear()) {
        oprot.writeI32(struct.head_rear);
      }
      if (struct.isSetTraffic_kkbh()) {
        oprot.writeBinary(struct.traffic_kkbh);
      }
      if (struct.isSetTraffic_xzqh()) {
        oprot.writeBinary(struct.traffic_xzqh);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InputRecordBuffer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.licence_plate = iprot.readBinary();
        struct.setLicence_plateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.licence_plate_color = iprot.readBinary();
        struct.setLicence_plate_colorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vehicle_type = iprot.readBinary();
        struct.setVehicle_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vehicle_color = iprot.readBinary();
        struct.setVehicle_colorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vehicle_logo = iprot.readBinary();
        struct.setVehicle_logoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vehicle_child_logo = iprot.readBinary();
        struct.setVehicle_child_logoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vehicle_style = iprot.readBinary();
        struct.setVehicle_styleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.record_id = iprot.readBinary();
        struct.setRecord_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vehicle_feature = iprot.readBinary();
        struct.setVehicle_featureIsSet(true);
      }
      if (incoming.get(9)) {
        struct.source_type = iprot.readByte();
        struct.setSource_typeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.confidence_level = iprot.readDouble();
        struct.setConfidence_levelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.plate_confidence = iprot.readDouble();
        struct.setPlate_confidenceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.logo_confidence = iprot.readDouble();
        struct.setLogo_confidenceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.vehicle_left_x = iprot.readI32();
        struct.setVehicle_left_xIsSet(true);
      }
      if (incoming.get(14)) {
        struct.vehicle_left_y = iprot.readI32();
        struct.setVehicle_left_yIsSet(true);
      }
      if (incoming.get(15)) {
        struct.vehicle_rigth_x = iprot.readI32();
        struct.setVehicle_rigth_xIsSet(true);
      }
      if (incoming.get(16)) {
        struct.vehicle_rigth_y = iprot.readI32();
        struct.setVehicle_rigth_yIsSet(true);
      }
      if (incoming.get(17)) {
        struct.old_licence_plate = iprot.readBinary();
        struct.setOld_licence_plateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.traffic_time = iprot.readBinary();
        struct.setTraffic_timeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.head_rear = iprot.readI32();
        struct.setHead_rearIsSet(true);
      }
      if (incoming.get(20)) {
        struct.traffic_kkbh = iprot.readBinary();
        struct.setTraffic_kkbhIsSet(true);
      }
      if (incoming.get(21)) {
        struct.traffic_xzqh = iprot.readBinary();
        struct.setTraffic_xzqhIsSet(true);
      }
    }
  }

}

